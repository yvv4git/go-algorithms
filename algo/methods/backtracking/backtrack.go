package main

/*
Backtracking (откат):
Этот подход используется для решения задач, которые могут быть разбиты на несколько подзадач.
Он пытается решить каждую подзадачу, и если она не может быть решена, он откатывается и пытается решить следующую подзадачу.
Этот подход эффективен, когда количество возможных вариантов велико, и не все варианты могут быть проверены.

Выбор между Brute Force и Backtracking зависит от конкретной задачи и структуры данных, которые вы работаете с.
Brute Force может быть эффективным, если количество возможных вариантов небольшое,
но Backtracking может быть более эффективным, если количество возможных вариантов велико.
*/

func backtrack(candidates []int, target int, temp []int, result *[][]int) {
	// Если цель достигнута, добавляем текущее решение в результирующий список.
	if target == 0 {
		*result = append(*result, temp)
		return
	}

	// Если цель стала отрицательной, прекращаем дальнейшую рекурсию.
	if target < 0 {
		return
	}

	// Проходим по всем кандидатам.
	for i := 0; i < len(candidates); i++ {
		// Для каждого кандидата вызываем backtrack с обновленными параметрами.
		backtrack(candidates[i:], target-candidates[i], append(temp, candidates[i]), result)
	}
}

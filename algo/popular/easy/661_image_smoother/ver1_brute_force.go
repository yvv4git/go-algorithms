package main

import (
	"fmt"
)

func imageSmoother(img [][]int) [][]int {
	/*
		METHOD: Brute Force
		Метод заключается в создании новой матрицы, в которой каждый элемент будет средним значением интенсивности пикселей в окрестности 3x3 вокруг каждого пикселя исходной матрицы.
		Если пиксель находится на границе матрицы, то в расчет берутся только доступные пиксели.

		TIME COMPLEXITY:
		Временная сложность алгоритма составляет O(n^2), где n — количество строк и столбцов в матрице.
		Это связано с тем, что мы проходим по каждому элементу матрицы и для каждого элемента вычисляем среднее значение в окрестности 3x3, что требует константного количества операций.

		SPACE COMPLEXITY:
		Пространственная сложность алгоритма составляет O(n^2), так как мы создаем новую матрицу той же размерности, что и исходная матрица.
		Это связано с тем, что мы храним результаты вычислений в новой матрице.
	*/
	rows := len(img)
	if rows == 0 {
		return nil
	}
	cols := len(img[0])
	if cols == 0 {
		return nil
	}

	// Создаем новую матрицу
	result := make([][]int, rows)
	for i := range result {
		result[i] = make([]int, cols)
	}

	// Функция для вычисления среднего значения в окрестности 3x3
	avg := func(i, j int) int {
		sum := 0
		count := 0
		for x := i - 1; x <= i+1; x++ {
			for y := j - 1; y <= j+1; y++ {
				if x >= 0 && x < rows && y >= 0 && y < cols {
					sum += img[x][y]
					count++
				}
			}
		}
		return sum / count
	}

	// Заполняем новую матрицу
	for i := 0; i < rows; i++ {
		for j := 0; j < cols; j++ {
			result[i][j] = avg(i, j)
		}
	}

	return result
}

func main() {
	M := [][]int{{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}
	result := imageSmoother(M)
	fmt.Println(result) // Вывод: [[0 0 0] [0 0 0] [0 0 0]]
}

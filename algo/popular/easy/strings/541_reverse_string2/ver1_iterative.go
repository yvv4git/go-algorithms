package main

import "fmt"

// Функция для переворачивания подстроки
func reverse(s []byte) {
	i, j := 0, len(s)-1
	for i < j {
		s[i], s[j] = s[j], s[i]
		i++
		j--
	}
}

// Функция для реверса строки по блокам
func reverseStr(s string, k int) string {
	/*
		METHOD: Iterative
		Используемый подход заключается в том, что мы перебираем каждый блок из k символов в строке s и переворачиваем его.
		Если длина строки s меньше k, то мы переворачиваем весь остаток строки.
		Если длина строки s больше k, то мы переворачиваем первый блок размером k и продолжаем переворачивать каждый следующий блок из k символов.

		TIME COMPLEXITY: O(n), где n - длина входной строки s, потому что мы проходим по каждому символу в строке ровно один раз.

		SPACE COMPLEXITY: O(n), потому что мы используем дополнительную память для хранения результирующей строки.
	*/
	str := []byte(s)
	for i := 0; i < len(str); i += 2 * k {
		// Если остаток строки меньше k, то переворачиваем весь остаток строки
		if i+k > len(str) {
			reverse(str[i:])
		} else {
			// Иначе переворачиваем первый блок размером k
			reverse(str[i : i+k])
		}
	}
	return string(str)
}

func main() {
	fmt.Println(reverseStr("abcdefg", 2)) // Вывод: "bacdfeg"
}

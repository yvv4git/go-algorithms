package main

func reverseStrV3(s string, k int) string {
	/*
		METHOD: Two pointers
		В этом коде мы используем два указателя left и right для переворота блоков строки.
		left указывает на начало текущего блока, а right - на конец блока или конец строки, если длина строки меньше k.
		Затем мы переворачиваем блок символов в массиве рун res.

		TIME COMPLEXITY: O(n), так как мы создаем новый массив рун для хранения результата.

		SPACE COMPLEXITY: O(n), так как мы проходим по каждому символу в строке ровно один раз.
	*/
	// Преобразуем строку в срез рун, чтобы работать с символами Unicode
	res := []rune(s)

	// Инициализируем два указателя: l указывает на начало текущего блока, r - на конец блока
	l, r := 0, k-1

	// groupIndex отслеживает индекс текущей группы блоков
	groupIndex := 0

	// Цикл продолжается, пока l меньше r
	for l < r {
		// Проверяем, является ли текущий блок первым в группе размером 2k
		if (r-k+1)%(2*k) == 0 {
			// Ограничиваем r размером строки s
			r = min(r, len(s)-1)
			// Переворачиваем блок символов в срезе res
			for l < r {
				res[l], res[r] = res[r], res[l]
				l++
				r--
			}
			// Увеличиваем индекс группы и сдвигаем указатели l и r на начало следующей группы
			groupIndex++
			l = 2 * k * groupIndex
			r = l + k - 1
			// Если l больше или равно длине строки s, прекращаем цикл
			if l >= len(s) {
				break
			}
		}
	}

	return string(res)
}

//func min(a, b int) int {
//	if a < b {
//		return a
//	}
//	return b
//}

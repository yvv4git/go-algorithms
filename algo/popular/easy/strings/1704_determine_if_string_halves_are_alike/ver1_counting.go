package main

import "strings"

func halvesAreAlikeV1(s string) bool {
	/*
		METHOD: Count
		TIME COMPLEXITY: O(n), где n - длина строки, потому что мы проходим по каждому символу строки ровно один раз.
		SPACE COMPLEXITY: O(1), потому что мы используем фиксированное количество дополнительной памяти, независимо от размера входных данных.

		Метод, используемый в этом решении, заключается в подсчете количества гласных букв в первой половине строки
		и вычитании количества гласных букв во второй половине строки. Если количество гласных букв равно нулю,
		то строки одинаковы.
	*/
	vowels := "aeiouAEIOU"
	count := 0
	mid := len(s) / 2

	// Проходим по первой половине строки и считаем количество гласных букв
	for i := 0; i < mid; i++ {
		if strings.ContainsRune(vowels, rune(s[i])) {
			count++
		}
	}

	// Проходим по второй половине строки и вычитаем количество гласных букв
	for i := mid; i < len(s); i++ {
		if strings.ContainsRune(vowels, rune(s[i])) {
			count--
		}
	}

	// Если количество гласных букв равно нулю, то строки одинаковы
	return count == 0
}

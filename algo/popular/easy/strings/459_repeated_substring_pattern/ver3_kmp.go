package _59_repeated_substring_pattern

func repeatedSubstringPatternV3(s string) bool {
	/*
		Method: KMP (Алгоритм Кнута-Морриса-Пратта)
		Time complexity: O(n)
		Space complexity: O(n)

		Time complexity
		Временная сложность этой функции составляет O(n), где n - длина строки.
		Это связано с тем, что функция проходит по строке только один раз.

		Space complexity
		Пространственная сложность также составляет O(n), так как функция использует дополнительный массив для хранения результатов поиска.

		Алгоритм KMP - это алгоритм поиска строки, который можно использовать для решения этой задачи.
		Он может быть использован для поиска самого длинного префикса, который также является суффиксом.
		Если длина строки делится на длину подстроки, то строка содержит повторяющуюся подстроку.
		Этот подход имеет сложность O(n).

	*/
	// Создаем массив для хранения следующего состояния
	nxt := make([]int, len(s))

	// Инициализируем индекс j
	j := 0

	// Проходим по строке
	for i := 1; i < len(s); i++ {
		// Пока j больше 0 и символы в строке и в следующем состоянии не равны
		for j > 0 && s[i] != s[j] {
			// Переходим к следующему символу в следующем состоянии
			j = nxt[j-1]
		}

		// Если символы в строке и в следующем состоянии равны
		if s[i] == s[j] {
			// Переходим к следующему символу в строке
			j++
		}

		// Сохраняем значение j в следующем состоянии
		nxt[i] = j
	}

	// Длина строки
	n := len(s)

	// Если последнее значение в следующем состоянии больше 0 и длина строки делится на разность длины строки и последнего значения в следующем состоянии без остатка,
	// то строка содержит повторяющуюся подстроку
	return nxt[n-1] > 0 && n%(n-nxt[n-1]) == 0
}

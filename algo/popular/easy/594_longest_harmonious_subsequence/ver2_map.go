package main

import (
	"fmt"
)

func findLHSv2(nums []int) int {
	/*
		МЕТОД: Подсчет частот без сортировки

		ВРЕМЕННАЯ СЛОЖНОСТЬ: O(n)
		ОПИСАНИЕ:
		- Подсчет частоты каждого числа в массиве занимает O(n) времени.
		- Проход по карте для поиска гармоничных пар также занимает O(n) времени.
		- Таким образом, общая временная сложность составляет O(n).

		ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ: O(n)
		ОПИСАНИЕ:
		- Использование карты для хранения частоты каждого числа требует O(n) дополнительной памяти.
		- Таким образом, общая пространственная сложность составляет O(n).
	*/

	// Создаем карту для подсчета частоты встречаемости чисел
	countMap := make(map[int]int)

	// Заполняем карту частотами
	for _, num := range nums {
		countMap[num]++
	}

	maxLen := 0

	// Проходим по карте и ищем гармоничные пары
	for num := range countMap {
		if countMap[num+1] > 0 {
			// Если есть число num+1, считаем длину гармоничной подпоследовательности
			currLen := countMap[num] + countMap[num+1]
			// Обновляем максимальную длину
			if currLen > maxLen {
				maxLen = currLen
			}
		}
	}

	return maxLen
}

func main() {
	nums := []int{1, 3, 2, 2, 5, 2, 3, 7}
	fmt.Println(findLHS(nums)) // Вывод: 5
}

package main

import (
	"fmt"
	"math"
	"sort"
)

func minimumAbsDifference(arr []int) [][]int {
	/*
		METHOD: Sorting
		Этот метод основан на сортировке массива. После сортировки массива, минимальная абсолютная разность
		между элементами будет находиться между соседними элементами. Это позволяет нам эффективно найти
		все пары с минимальной разностью, просто пройдя по массиву один раз.

		TIME COMPLEXITY: O(n * log(n))
		Временная сложность определяется сортировкой массива. Сортировка массива с использованием
		встроенной функции sort.Ints занимает O(n * log(n)) времени, где n — количество элементов в массиве.
		После сортировки мы проходим по массиву один раз, что занимает O(n) времени. Таким образом, общая
		временная сложность составляет O(n * log(n)).

		SPACE COMPLEXITY: O(1)
		Пространственная сложность алгоритма является константной (O(1)), так как мы не используем
		дополнительную память, которая зависит от размера входного массива. Мы только инициализируем
		несколько переменных (minDiff, result) и не создаем дополнительных структур данных, размер
		которых зависит от входных данных. Результат (result) возвращается, но он не учитывается в
		пространственной сложности, так как это требование задачи.
	*/
	// Сначала сортируем массив, чтобы соседние элементы были ближе друг к другу
	sort.Ints(arr)

	// Инициализируем переменную для хранения минимальной абсолютной разности
	minDiff := math.MaxInt32

	// Инициализируем слайс для хранения результирующих пар
	var result [][]int

	// Проходим по массиву, начиная со второго элемента
	for i := 1; i < len(arr); i++ {
		// Вычисляем разность между текущим и предыдущим элементом
		diff := arr[i] - arr[i-1]

		// Если текущая разность меньше минимальной, обновляем minDiff
		// и сбрасываем результирующий список пар
		if diff < minDiff {
			minDiff = diff
			result = [][]int{{arr[i-1], arr[i]}}
		} else if diff == minDiff {
			// Если разность равна minDiff, добавляем пару в результат
			result = append(result, []int{arr[i-1], arr[i]})
		}
	}

	// Возвращаем результат
	return result
}

func main() {
	// Пример входных данных
	arr := []int{4, 2, 1, 3}

	// Вызываем функцию и выводим результат
	result := minimumAbsDifference(arr)
	fmt.Println(result) // Ожидаемый вывод: [[1 2] [2 3] [3 4]]
}

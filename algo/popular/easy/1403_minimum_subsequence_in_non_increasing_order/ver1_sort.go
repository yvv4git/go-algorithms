package main

import (
	"fmt"
	"sort"
)

// Функция для нахождения минимальной подпоследовательности
func minSubsequence(nums []int) []int {
	/*
		METHOD: Sort and Select
		1. Сортируем массив в порядке убывания, чтобы легко выбирать наибольшие элементы.
		2. Вычисляем общую сумму всех элементов массива, чтобы знать, какая сумма останется после выбора подпоследовательности.
		3. Инициализируем переменные для хранения текущей суммы (currentSum) и результата (result).
		4. Проходим по отсортированному массиву, добавляя элементы в подпоследовательность, пока их сумма не станет строго больше суммы оставшихся элементов.

		TIME COMPLEXITY: O(n log n)
		- Сортировка массива занимает O(n log n).
		- Проход по массиву для вычисления общей суммы и выбора подпоследовательности занимает O(n).
		- Итоговая сложность определяется сортировкой: O(n log n).

		SPACE COMPLEXITY: O(n)
		- Для хранения результата (подпоследовательности) требуется дополнительный массив, который в худшем случае может содержать все элементы исходного массива.
		- Сортировка выполняется in-place, поэтому дополнительная память для сортировки не учитывается.
	*/

	// 1. Сортируем массив в порядке убывания
	sort.Sort(sort.Reverse(sort.IntSlice(nums)))

	// 2. Вычисляем общую сумму всех элементов массива
	totalSum := 0
	for _, num := range nums {
		totalSum += num
	}

	// 3. Инициализируем переменные для хранения текущей суммы и результата
	currentSum := 0
	result := []int{}

	// 4. Проходим по отсортированному массиву
	for _, num := range nums {
		// Добавляем текущий элемент к текущей сумме
		currentSum += num
		// Добавляем текущий элемент в результат
		result = append(result, num)
		// Проверяем, стала ли текущая сумма больше суммы оставшихся элементов
		if currentSum > totalSum-currentSum {
			// Если да, прерываем цикл
			break
		}
	}

	// Возвращаем результат
	return result
}

func main() {
	// Пример входных данных
	nums := []int{4, 3, 10, 9, 8}

	// Вызываем функцию и получаем результат
	result := minSubsequence(nums)

	// Выводим результат
	fmt.Println(result) // Ожидаемый вывод: [10, 9]
}

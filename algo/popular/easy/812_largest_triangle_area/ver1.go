package main

import (
	"fmt"
	"math"
)

// Функция для вычисления площади треугольника по трем точкам
func area(p1, p2, p3 []int) float64 {
	return 0.5 * math.Abs(float64(p1[0]*(p2[1]-p3[1])+p2[0]*(p3[1]-p1[1])+p3[0]*(p1[1]-p2[1])))
}

// Основная функция для поиска максимальной площади треугольника
func largestTriangleArea(points [][]int) float64 {
	/*
		METHOD: Brute Force

		TIME COMPLEXITY: O(n^3)
		- Мы используем три вложенных цикла для перебора всех возможных комбинаций из трех точек.
		- Каждый цикл проходит по n элементам, где n — количество точек.
		- Таким образом, общее количество операций составляет n * (n-1) * (n-2) / 6, что асимптотически эквивалентно O(n^3).

		SPACE COMPLEXITY: O(1)
		- Мы используем фиксированное количество дополнительной памяти для хранения переменных (maxArea, n, currentArea).
		- Независимо от размера входных данных, объем используемой памяти остается постоянным.
	*/
	maxArea := 0.0
	n := len(points)

	// Перебираем все возможные комбинации из трех точек
	for i := 0; i < n; i++ {
		for j := i + 1; j < n; j++ {
			for k := j + 1; k < n; k++ {
				// Вычисляем площадь треугольника для текущей комбинации точек
				currentArea := area(points[i], points[j], points[k])
				// Обновляем максимальную площадь, если текущая площадь больше
				if currentArea > maxArea {
					maxArea = currentArea
				}
			}
		}
	}

	return maxArea
}

func main() {
	// Пример использования
	points := [][]int{{0, 0}, {0, 1}, {1, 0}, {0, 2}, {2, 0}}
	fmt.Println(largestTriangleArea(points)) // Вывод: 2.0
}

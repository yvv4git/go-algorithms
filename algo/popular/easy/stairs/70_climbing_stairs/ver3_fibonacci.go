package main

func climbStairsV3(n int) int {
	/*
		Method: Fibonacci
		Time complexity: O(n)
		Space complexity: O(1)

		Функция climbStairs(n int) int принимает на вход количество ступеней n и возвращает количество способов,
		которыми можно добраться до верхней ступеньки, если можно шагать на одну или две ступеньки за раз.

		Функция fibonacci(n int) int реализует эту формулу.
		Она начинает с двух чисел a и b, равных 0 и 1 соответственно, и выполняет цикл n раз, в котором a и b обновляются так,
		что a становится b, а b становится a + b. Это эквивалентно переходу от числа Фибоначчи n-1 к числу Фибоначчи n.
		В конце цикла функция возвращает a, которое является n-ым числом Фибоначчи.


		Числа Фибоначчи — это числовая последовательность, в которой каждое число является суммой двух предыдущих.
		Первые два числа в этой последовательности обычно определяются как 0 и 1, а каждое последующее число получается сложением двух предыдущих.
		0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...

		Для понимания, почему это так, рассмотрим задачу на примере трех ступеней.
		Если у нас есть три ступеньки, то мы можем добраться до них следующими способами:
		- 1-шаг + 1-шаг + 1-шаг
		- 1-шаг + 2-шаги
		- 2-шаги + 1-шаг

		Таким образом, количество способов добраться до четвертой ступеньки равно сумме количества способов до третьей и второй ступеней.
		Это и есть числа Фибоначчи.
	*/
	return fibonacci(n + 1)
}

func fibonacci(n int) int {
	a, b := 0, 1

	for x := 0; x < n; x++ {
		a, b = b, a+b
	}

	return a
}

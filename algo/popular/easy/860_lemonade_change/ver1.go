package main

func lemonadeChange(bills []int) bool {
	/*
		METHOD:
		Метод заключается в отслеживании количества купюр достоинством 5 и 10 долларов.
		Для каждого клиента проверяется, можем ли мы дать сдачу, используя имеющиеся купюры.

		TIME COMPLEXITY:
		Временная сложность алгоритма составляет O(n), где n — количество клиентов (длина массива bills).
		Это связано с тем, что мы проходим по каждому элементу массива ровно один раз.

		SPACE COMPLEXITY:
		Пространственная сложность алгоритма составляет O(1), так как мы используем только константное количество дополнительной памяти
		для хранения счетчиков купюр.
	*/
	five, ten := 0, 0

	for _, bill := range bills {
		switch bill {
		case 5:
			// Если клиент дает 5 долларов, просто увеличиваем счетчик пятерок
			five++
		case 10:
			// Если клиент дает 10 долларов, проверяем, есть ли у нас пятерки для сдачи
			if five == 0 {
				return false
			}
			// Уменьшаем счетчик пятерок и увеличиваем счетчик десяток
			five--
			ten++
		case 20:
			// Если клиент дает 20 долларов, проверяем, есть ли у нас десятки и пятерки для сдачи
			if ten > 0 && five > 0 {
				// Даем сдачу 10 + 5
				ten--
				five--
			} else if five >= 3 {
				// Даем сдачу 3 * 5
				five -= 3
			} else {
				// Не можем дать сдачу
				return false
			}
		}
	}

	// Если все клиенты получили сдачу, возвращаем true
	return true
}

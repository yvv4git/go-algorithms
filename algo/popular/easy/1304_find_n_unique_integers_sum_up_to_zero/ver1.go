package main

import "fmt"

func sumZero(N int) []int {
	/*
		METHOD: Arithmetic
		Мы используем арифметический подход для создания массива из N уникальных целых чисел, сумма которых равна нулю.

		TIME COMPLEXITY: O(N)
		Временная сложность O(N) обусловлена тем, что мы выполняем цикл, который проходит по N/2 итераций, что эквивалентно O(N).

		SPACE COMPLEXITY: O(N)
		Пространственная сложность O(N) обусловлена тем, что мы создаем массив размером N для хранения результатов.
	*/
	result := make([]int, 0, N)

	// Если N нечетное, добавляем 0.
	// Если N нечетное, мы не можем просто использовать пары чисел, так как останется одно число без пары.
	// Например, для N = 3 пары [1, -1] дадут сумму нуля, но останется одно число без пары.
	// Чтобы решить эту проблему, мы добавляем ноль. Ноль не влияет на сумму, так как 0 + любое_число = любое_число.
	// Таким образом, добавление нуля позволяет нам уравновесить сумму всех чисел.
	if N%2 != 0 {
		result = append(result, 0)
	}

	// Добавляем пары чисел [1, -1, 2, -2, ..., N/2, -N/2]
	for i := 1; i <= N/2; i++ {
		result = append(result, i)
		result = append(result, -i)
	}

	return result
}

func main() {
	N := 5
	fmt.Println(sumZero(N)) // Вывод: [0 1 -1 2 -2]
}

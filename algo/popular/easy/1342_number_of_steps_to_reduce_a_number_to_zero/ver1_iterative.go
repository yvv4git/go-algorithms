package main

import "fmt"

// Функция для подсчета количества шагов до нуля
func numberOfSteps(num int) int {
	/*
		METHOD: Iterative approach
		- На каждом шаге проверяем, является ли число четным или нечетным.
		- Если число четное, делим его на 2.
		- Если число нечетное, вычитаем 1.
		- Повторяем процесс, пока число не станет равным 0.
		- Считаем количество шагов.

		TIME COMPLEXITY: O(log n)
		- В худшем случае число уменьшается вдвое на каждом шаге (для четных чисел).
		- Для нечетных чисел число уменьшается на 1, что незначительно влияет на общую сложность.
		- Таким образом, количество шагов пропорционально log₂(n).

		SPACE COMPLEXITY: O(1)
		- Используется константное количество дополнительной памяти (переменные steps и num).
	*/
	steps := 0 // Инициализируем счетчик шагов

	// Пока число больше нуля, выполняем шаги
	for num > 0 {
		if num%2 == 0 { // Если число четное
			num = num / 2 // Делим его на 2
		} else { // Если число нечетное
			num = num - 1 // Вычитаем 1
		}
		steps++ // Увеличиваем счетчик шагов
	}

	return steps // Возвращаем общее количество шагов
}

func main() {
	// Пример использования функции
	num := 14                                                      // Задаем начальное число
	result := numberOfSteps(num)                                   // Вызываем функцию и получаем результат
	fmt.Printf("Количество шагов для числа %d: %d\n", num, result) // Выводим результат
}

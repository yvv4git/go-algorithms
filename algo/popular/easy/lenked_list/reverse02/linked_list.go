package main

import "fmt"

// List представляет односвязный список
type List struct {
	Head *Node
}

// Insert добавляет новый узел в список
func (l *List) Insert(value int) {
	/*
		Вставка элемента в односвязный список может быть выполнена в двух случаях: в начало списка и в конец списка.
		1. Вставка в начало списка.
		Время вставки в начало списка - O(1).
		Это происходит за постоянное время, независимо от размера списка, потому что мы просто изменяем указатель head на новый узел.

		2. Вставка в конец списка.
		Время вставки в конец списка - O(n), где n - количество узлов в списке.
		Это происходит, потому что мы должны пройти по всему списку, чтобы найти последний узел,
		а затем изменить указатель next последнего узла на новый узел.

		3. Вставка в середину списка.
		Обратите внимание, что вставка в середину списка может быть выполнена за O(n),
		если нет доступа к предыдущему узлу, где n - количество узлов в списке.
	*/
	node := &Node{Value: value}
	if l.Head == nil {
		l.Head = node
	} else {
		current := l.Head
		for current.Next != nil {
			current = current.Next
		}
		current.Next = node
	}
}

// Reverse разворачивает список
func (l *List) Reverse() {
	/*
		Разворот односвязного списка - это операция, которая меняет направление связей между узлами.
		В худшем случае, время выполнения этой операции пропорционально количеству узлов в списке, O(n), где n - количество узлов в списке.
		Это происходит потому, что мы должны пройти по всему списку, меняя указатель next каждого узла на предыдущий узел.
	*/
	var prev *Node
	current := l.Head
	for current != nil {
		next := current.Next
		current.Next = prev
		prev = current
		current = next
	}
	l.Head = prev
}

// Print выводит список на экран
func (l *List) Print() {
	current := l.Head
	for current != nil {
		fmt.Printf("%d ", current.Value)
		current = current.Next
	}
	fmt.Println()
}

package main

// mergeTwoLists - функция для объединения двух отсортированных списков
func mergeTwoListsV2(l1 *ListNode, l2 *ListNode) *ListNode {
	/*
		METHOD: Recursion
		TIME COMPLEXITY: O(n)
		Space complexity: O(n)

		Time complexity.
		Временная сложность этого алгоритма составляет O(n), где n - количество узлов в обоих списках.
		Это происходит, потому что мы проходимся по каждому узлу в обоих списках по одному разу.

		Space complexity.
		Пространственная сложность составляет O(n), поскольку мы используем стек вызовов для рекурсивных вызовов функции mergeTwoLists.
		В худшем случае, когда списки одинаковы, глубина стека вызовов будет равна количеству узлов в списке.
	*/
	// Создаем фиктивный узел, который будет началом результирующего списка
	dummy := &ListNode{}
	// Указатель tail используется для отслеживания последнего узла в результирующем списке
	tail := dummy

	// Проходимся по обоим спискам, сравнивая элементы и добавляя меньший из них в результирующий список
	for l1 != nil && l2 != nil {
		if l1.Val < l2.Val {
			tail.Next = l1
			l1 = l1.Next
		} else {
			tail.Next = l2
			l2 = l2.Next
		}
		tail = tail.Next
	}

	// Если один из списков закончился, добавляем оставшиеся элементы из другого списка
	if l1 != nil {
		tail.Next = l1
	} else {
		tail.Next = l2
	}

	// Возвращаем указатель на начало объединенного списка
	return dummy.Next
}

package main

// Функция для нахождения середины списка
func middleNodeV4(head *ListNode) *ListNode {
	/*
		METHOD: Using an Array
		TIME COMPLEXITY: O(n)
		SPACE COMPLEXITY: O(n)

		Time Complexity.
		Временная сложность для этого алгоритма составляет O(n), где n - количество узлов в списке.
		Это связано с тем, что мы проходим по всему списку дважды: один раз для подсчета узлов, а второй раз для поиска середины.

		Space Complexity.
		Пространственная сложность для этого алгоритма составляет O(n), так как мы создаем новый массив для хранения узлов.
		Размер массива зависит от количества узлов в списке.
	*/
	// Инициализируем массив для хранения узлов
	var nodes []*ListNode

	// Пока head не равен nil
	for head != nil {
		// Добавляем узел в массив
		nodes = append(nodes, head)
		// Переходим к следующему узлу
		head = head.Next
	}

	// Возвращаем серединный узел
	// Так как индексы в Go начинаются с 0, то серединный узел будет на позиции len(nodes)/2
	return nodes[len(nodes)/2]
}

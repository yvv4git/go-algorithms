package _264_largest_3_same_digit_number_in_string

import "sort"

// largestGoodInteger возвращает наибольшее число, состоящее из одной и той же цифры, длиной 3 символа.
// Если такого числа не существует, возвращается пустая строка.
// Временная сложность: O(n log n), где n - длина входной строки.
// Пространственная сложность: O(n), так как используется дополнительная память для хранения отсортированной строки.
func largestGoodInteger(num string) string {
	/*
		METHOD:
		TIME COMPLEXITY: O(n log n)
		SPACE COMPLEXITY: O(n)
	*/

	// Преобразуем строку в слайс рун.
	runes := []rune(num)

	// Сортируем слайс рун.
	sort.Slice(runes, func(i, j int) bool {
		return runes[i] > runes[j]
	})

	// Проходим по всем рунам в отсортированном слайсе.
	for _, r := range runes {
		// Если руны совпадают, значит, мы нашли число, состоящее из одной и той же цифры, длиной 3 символа.
		if runes[0] == r && runes[1] == r && runes[2] == r {
			// Преобразуем руны в строку и возвращаем ее.
			return string([]rune{r, r, r})
		}
	}

	// Если мы не нашли числа, состоящего из одной и той же цифры, длиной 3 символа, возвращаем пустую строку.
	return ""
}

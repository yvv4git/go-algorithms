package _264_largest_3_same_digit_number_in_string

import (
	"regexp"
	"strconv"
)

// largestGoodInteger возвращает наибольшее число, состоящее из одной и той же цифры, длиной 3 символа.
// Если такого числа не существует, возвращается пустая строка.
// Временная сложность: O(n), где n - длина входной строки.
// Пространственная сложность: O(1), так как используется фиксированное количество дополнительной памяти.
func largestGoodIntegerV2(num string) string {
	// Создаем регулярное выражение, которое ищет подстроку, состоящую из одной и той же цифры, длиной 3 символа.
	re := regexp.MustCompile(`(\d)\1{2}`)

	// Ищем все подстроки, которые соответствуют регулярному выражению.
	matches := re.FindAllString(num, -1)

	// Если подстрок не найдено, возвращаем пустую строку.
	if len(matches) == 0 {
		return ""
	}

	// Инициализируем максимальное число как минимальное возможное число.
	maxNum := -1

	// Проходим по всем найденным подстрокам.
	for _, match := range matches {
		// Преобразуем подстроку в число.
		num, _ := strconv.Atoi(match)

		// Если число больше текущего максимального, обновляем максимальное число.
		if num > maxNum {
			maxNum = num
		}
	}

	// Преобразуем максимальное число обратно в строку и возвращаем ее.
	return strconv.Itoa(maxNum)
}

//go:build ignore

package main

import (
	"sort"
)

func smallerNumbersThanCurrent(nums []int) []int {
	/*
		METHOD: Binary Search and Sort (Бинарный поиск и сортировка)
		DESCRIPTION:
			- Для каждого элемента массива nums нам нужно найти количество элементов, меньших текущего.
			- Для этого мы сначала создаем отсортированную копию массива nums.
			- Затем для каждого элемента nums[i] используем бинарный поиск, чтобы найти его позицию в отсортированном массиве.
			- Позиция элемента в отсортированном массиве равна количеству элементов, меньших текущего.

		TIME COMPLEXITY: O(n log n), где:
			- Сортировка массива: O(n log n).
			- Бинарный поиск для каждого элемента: O(log n) для каждого из n элементов, что в сумме дает O(n log n).
			- Итоговая временная сложность: O(n log n).

		SPACE COMPLEXITY: O(n), где:
			- Мы создаем копию массива nums для сортировки: O(n).
			- Результирующий массив result также занимает O(n).
			- Итоговая пространственная сложность: O(n).
	*/

	// Создаем копию массива nums и сортируем её
	sortedNums := make([]int, len(nums))
	copy(sortedNums, nums)
	sort.Ints(sortedNums) // Сортировка занимает O(n log n)

	// Создаем результирующий массив
	result := make([]int, len(nums))

	// Для каждого элемента в nums находим его позицию в отсортированном массиве
	for i, num := range nums {
		// Используем бинарный поиск для нахождения позиции элемента
		// Бинарный поиск занимает O(log n)
		result[i] = sort.SearchInts(sortedNums, num)
	}

	return result
}

package main

import (
	"fmt"
)

func commonChars(words []string) []string {
	/*
		METHOD: Hash
		Описание:
		- Используем массив для хранения минимальных частот каждого символа (от 'a' до 'z').
		- Для каждой строки обновляем этот массив, учитывая минимальное количество вхождений символов.
		- В конце, собираем символы в соответствии с их частотами в результирующий массив.

		TIME COMPLEXITY: O(n)
		Описание:
		- Инициализация массива minFreq: O(1) (постоянное время, так как размер массива фиксирован — 26).
		- Проход по каждой строке: O(m), где m — количество строк.
		- Подсчет частот символов в каждой строке: O(k), где k — длина текущей строки.
		- Обновление минимальных частот: O(26) (постоянное время, так как мы проходим по фиксированному массиву размером 26).
		- Общая временная сложность: O(m * k) = O(n), где n — общее количество символов во всех строках.

		SPACE COMPLEXITY: O(1)
		Описание:
		- Массив minFreq: O(26) = O(1) (постоянное пространство).
		- Массив currentFreq: O(26) = O(1) (постоянное пространство).
		- Результирующий массив result: O(n), где n — количество общих символов. Однако, это не учитывается в пространственной сложности, так как это выходной массив.
		- Общая пространственная сложность: O(1) (постоянное пространство).
	*/
	// Если массив строк пуст, возвращаем пустой массив
	if len(words) == 0 {
		return []string{}
	}

	// Создаем массив для хранения минимальных частот каждого символа
	minFreq := make([]int, 26)
	for i := range minFreq {
		minFreq[i] = 100 // Инициализируем большим числом, чтобы можно было найти минимум
	}

	// Проходим по каждой строке в массиве
	for _, word := range words {
		// Создаем массив для текущей частоты символов в строке
		currentFreq := make([]int, 26)

		// Подсчитываем частоту каждого символа в текущей строке
		for _, char := range word {
			currentFreq[char-'a']++
		}

		// Обновляем минимальные частоты символов
		for i := 0; i < 26; i++ {
			if currentFreq[i] < minFreq[i] {
				minFreq[i] = currentFreq[i]
			}
		}
	}

	// Собираем результат
	var result []string
	for i := 0; i < 26; i++ {
		for j := 0; j < minFreq[i]; j++ {
			result = append(result, string('a'+i))
		}
	}

	return result
}

func main() {
	words := []string{"bella", "label", "roller"}
	fmt.Println(commonChars(words)) // Вывод: ["e", "l", "l"]

	words = []string{"cool", "lock", "cook"}
	fmt.Println(commonChars(words)) // Вывод: ["c", "o"]
}

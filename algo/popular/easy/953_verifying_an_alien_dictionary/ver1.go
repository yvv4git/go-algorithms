package main

import (
	"fmt"
)

// Функция для проверки, отсортированы ли слова в соответствии с заданным алфавитом
func isAlienSorted(words []string, order string) bool {
	/*
		Task: Задача заключается в проверке, отсортированы ли слова в списке в лексикографическом порядке согласно заданному алфавиту инопланетной расы.

		METHOD: Loop
		Описание:
		- Мы используем два вложенных цикла для сравнения каждой пары соседних слов.
		- Внешний цикл проходит по всем словам, а внутренний цикл сравнивает символы в текущих словах.
		- Если символы различаются, мы проверяем их порядок с помощью мапы `orderMap`.
		- Если порядок неправильный, возвращаем `false`.
		- Если все пары слов отсортированы правильно, возвращаем `true`.

		TIME COMPLEXITY: O(n * m), где n — количество слов, m — средняя длина слова
		Описание:
		- Внешний цикл проходит по всем словам, что занимает O(n) времени.
		- Внутренний цикл проходит по символам в текущих словах, что в среднем занимает O(m) времени.
		- Таким образом, общая временная сложность составляет O(n * m).

		SPACE COMPLEXITY: O(1), количество символов ограничено (26 символов)
		Описание:
		- Мы используем мапу `orderMap` для хранения порядка каждой буквы в алфавите.
		- Размер мапы фиксирован и равен количеству символов в алфавите (26 символов).
		- Таким образом, пространственная сложность составляет O(1).
	*/
	// Создаем мапу для хранения порядка каждой буквы в алфавите
	orderMap := make(map[byte]int)
	for i := 0; i < len(order); i++ {
		orderMap[order[i]] = i
	}

	// Проходим по всем парам соседних слов
	for i := 0; i < len(words)-1; i++ {
		word1 := words[i]
		word2 := words[i+1]

		// Сравниваем символы в текущих словах
		for j := 0; j < len(word1); j++ {
			// Если второе слово короче первого и все предыдущие символы совпадают,
			// то слова не отсортированы
			if j >= len(word2) {
				return false
			}

			// Если символы различаются, проверяем их порядок
			if word1[j] != word2[j] {
				if orderMap[word1[j]] > orderMap[word2[j]] {
					return false
				}
				// Если порядок правильный, переходим к следующей паре слов
				break
			}
		}
	}

	// Если все пары слов отсортированы правильно, возвращаем true
	return true
}

func main() {
	// Примеры использования функции
	words1 := []string{"hello", "leetcode"}
	order1 := "hlabcdefgijkmnopqrstuvwxyz"
	fmt.Println(isAlienSorted(words1, order1)) // true

	words2 := []string{"word", "world", "row"}
	order2 := "worldabcefghijkmnpqstuvxyz"
	fmt.Println(isAlienSorted(words2, order2)) // false
}

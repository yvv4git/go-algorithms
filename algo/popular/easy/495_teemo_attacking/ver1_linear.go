package main

import (
	"fmt"
)

func findPoisonedDuration(timeSeries []int, duration int) int {
	/*
		METHOD: Linear - Линейный проход (Оптимальный).
		Проверяем, не пуст ли массив timeSeries, и возвращаем 0, если пуст.
		Инициализируем переменную totalDuration для хранения общего времени действия яда.
		Проходим по массиву timeSeries до предпоследнего элемента, вычисляя время окончания действия яда (endTime) для каждого удара.
		- Если следующий удар наносится до окончания действия текущего яда (timeSeries[i+1] < endTime),
		добавляем разницу между временем следующего удара и текущим временем начала действия яда;
		- в противном случае добавляем полную продолжительность действия яда.
		Добавляем продолжительность действия яда от последнего удара и возвращаем totalDuration.

		TIME COMPLEXITY: O(n), мы проходим по массиву timeSeries один раз,
		выполняя фиксированное количество операций для каждого элемента (вычисление endTime, сравнение и добавление к totalDuration).
		Таким образом, время выполнения алгоритма прямо пропорционально количеству элементов в массиве timeSeries,
		что дает временную сложность O(n), где n — количество элементов в массиве.

		SPACE COMPLEXITY: O(1), мы используем фиксированное количество дополнительной памяти, независимо от размера входных данных.
		Переменные totalDuration, endTime и индекс i занимают постоянное количество памяти,
		поэтому пространственная сложность составляет O(1).
	*/
	// Если массив timeSeries пуст, возвращаем 0
	if len(timeSeries) == 0 {
		return 0
	}

	// Инициализируем переменную для хранения общего времени действия яда
	totalDuration := 0

	// Проходим по массиву timeSeries
	for i := 0; i < len(timeSeries)-1; i++ {
		// Вычисляем время окончания действия яда от текущего удара
		endTime := timeSeries[i] + duration

		// Если следующий удар наносится до окончания действия текущего яда,
		// добавляем разницу между временем следующего удара и текущим временем начала действия яда
		// В противном случае добавляем полную продолжительность действия яда
		if timeSeries[i+1] < endTime {
			totalDuration += timeSeries[i+1] - timeSeries[i]
		} else {
			totalDuration += duration
		}
	}

	// Добавляем продолжительность действия яда от последнего удара
	totalDuration += duration

	return totalDuration
}

func main() {
	// Пример использования
	timeSeries := []int{1, 4}
	duration := 2
	fmt.Println(findPoisonedDuration(timeSeries, duration)) // Вывод: 4

	timeSeries = []int{1, 2}
	duration = 2
	fmt.Println(findPoisonedDuration(timeSeries, duration)) // Вывод: 3
}

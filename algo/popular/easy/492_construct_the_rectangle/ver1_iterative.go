package main

import (
	"fmt"
	"math"
)

func constructRectangle(area int) []int {
	/*
		METHOD: Iterative
		Для решения задачи мы используем следующий подход:
		1. Начинаем с корня квадратного из площади и идем вниз до 1.
		2. Для каждого значения ширины проверяем, делится ли площадь на эту ширину без остатка.
		3. Если делится, то находим соответствующую длину и возвращаем результат.
		4. Этот метод гарантирует, что разница между длиной и шириной будет минимальной.

		TIME COMPLEXITY:
		Временная сложность алгоритма составляет O(√n), где n — площадь прямоугольника.
		Это связано с тем, что мы проходим от корня квадратного из площади до 1.

		SPACE COMPLEXITY:
		Пространственная сложность алгоритма составляет O(1), так как мы используем фиксированное количество дополнительной памяти
		(переменные width, length и результирующий массив).
	*/
	// Начинаем с корня квадратного из площади и идем вниз
	for width := int(math.Sqrt(float64(area))); width > 0; width-- {
		// Проверяем, делится ли площадь на текущую ширину без остатка
		if area%width == 0 {
			// Если делится, то находим длину
			length := area / width
			// Возвращаем результат в виде массива [длина, ширина]
			return []int{length, width}
		}
	}
	// Если не найдено подходящих значений, возвращаем пустой массив (хотя это не должно произойти)
	return []int{}
}

func main() {
	// Пример использования
	area := 37
	result := constructRectangle(area)
	fmt.Println(result) // Вывод: [37 1]
}

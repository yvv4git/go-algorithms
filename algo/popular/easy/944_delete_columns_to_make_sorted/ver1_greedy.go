package main

import "fmt"

// minDeletionSize возвращает количество столбцов, которые нужно удалить для сортировки строк по столбцам.
func minDeletionSize(strs []string) int {
	/*
		METHOD: Greedy (жадный алгоритм)
		- Мы проверяем каждый столбец на отсортированность.
		- Если столбец не отсортирован, он удаляется.
		- Это локально оптимальное решение, которое приводит к глобально оптимальному результату.

		TIME COMPLEXITY: O(N * M)
		- N: количество строк (длина массива strs).
		- M: длина каждой строки (количество столбцов).
		- Мы проходим по каждому столбцу (M итераций) и для каждого столбца проверяем все строки (N итераций).

		SPACE COMPLEXITY: O(1)
		- Используется только константное количество дополнительной памяти.
	*/
	if len(strs) == 0 { // Если массив пуст, удалять ничего не нужно
		return 0
	}

	rowCount := len(strs)    // Количество строк
	colCount := len(strs[0]) // Количество столбцов
	deleteCount := 0         // Счетчик удаляемых столбцов

	for col := 0; col < colCount; col++ { // Проходим по каждому столбцу
		for row := 1; row < rowCount; row++ { // Проверяем строки в текущем столбце
			if strs[row][col] < strs[row-1][col] { // Если текущий символ меньше предыдущего
				deleteCount++ // Увеличиваем счетчик удаляемых столбцов
				break         // Прерываем проверку для этого столбца
			}
		}
	}

	return deleteCount // Возвращаем количество удаляемых столбцов
}

func main() {
	// Пример входных данных
	strs := []string{"abc", "bce", "cae"}
	// Вызов функции и вывод результата
	fmt.Println(minDeletionSize(strs)) // Ожидаемый результат: 1
}

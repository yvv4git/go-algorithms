package main

func maxPowerV3(s string) int {
	/*
		METHOD: Stack
		Используем стек для обработки символов строки. Стек позволяет эффективно удалять "плохие" пары символов
		(символы, которые являются одной и той же буквой, но в разных регистрах, например, "aA" или "bB").
		Алгоритм проходит по каждому символу строки и проверяет, образует ли он "плохую" пару с верхним элементом стека.
		Если пара найдена, верхний элемент удаляется из стека. В противном случае символ добавляется в стек.
		В результате в стеке остаются только символы, которые не образуют "плохих" пар.

		TIME COMPLEXITY: O(n), где n - длина строки s
		Алгоритм проходит по каждому символу строки один раз. Каждая операция добавления или удаления элемента из стека
		выполняется за O(1). Таким образом, общая временная сложность составляет O(n).

		SPACE COMPLEXITY: O(n)
		В худшем случае, если строка не содержит "плохих" пар, стек будет содержать все символы строки.
		Например, для строки "abc" стек будет содержать все три символа. Поэтому пространственная сложность составляет O(n).
	*/
	stack := []byte{}
	currentCount := 0
	maxCount := 1

	for i := 0; i < len(s); i++ {
		if len(stack) == 0 || stack[len(stack)-1] != s[i] {
			stack = []byte{s[i]}
			currentCount = 1
		} else {
			currentCount++
			stack = append(stack, s[i])
		}

		maxCount = max(maxCount, currentCount)
	}

	return maxCount
}

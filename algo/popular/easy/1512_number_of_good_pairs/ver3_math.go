package main

func numIdenticalPairsV3(nums []int) int {
	/*
		METHOD: Math
		Для решения задачи используется математическая формула для подсчета количества пар с одинаковыми числами.
		Формула: k * (k-1) / 2, где k - количество вхождений числа в массив.
		Результат - сумма всех пар для каждого числа в массиве.

		Формула k * (k-1) / 2 - это классическая комбинаторная формула для подсчета количества сочетаний из k элементов по 2, обозначаемая как C(k,2).

		Давайте разберем на примере, когда число встречается 4 раза (k=4):
		- Нам нужно найти все возможные пары из 4 элементов
		- Первый элемент пары может быть выбран 4 способами (k)
		- Второй элемент пары может быть выбран 3 способами (k-1), так как i < j
		- Делим на 2, потому что порядок выбора не важен
		- Итого: 4 * 3 / 2 = 6 пар

		Это можно проверить выписав все пары для k=4: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4).
		Действительно получается 6 пар, что соответствует результату формулы 4 * 3 / 2 = 6.

		TIME COMPLEXITY: O(n), где n - длина массива `nums`.
		SPACE COMPLEXITY: O(n), так как используется карта `freq` для хранения частоты вхождений чисел.
	*/

	// Создаем map для подсчета частоты каждого числа
	freq := make(map[int]int)
	for _, num := range nums {
		freq[num]++
	}

	// Считаем количество пар по формуле k * (k-1) / 2
	result := 0
	for _, count := range freq {
		result += count * (count - 1) / 2
	}

	return result
}

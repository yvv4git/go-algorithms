package main

import (
	"fmt"
	"strings"
)

func toGoatLatin(sentence string) string {
	/*
		METHOD: Split
		1. Метод Split разбивает строку на массив подстрок на основе указанного разделителя.
		В нашем случае разделителем является пробел (" "), что позволяет нам получить массив слов из исходной строки.
		2. После разделения строки на слова, мы можем легко итерироваться по каждому слову и применять к нему необходимые преобразования.
		3. Для каждого слова мы проверяем, начинается ли оно с гласной или согласной, и в зависимости от этого применяем соответствующие правила:
		- Если слово начинается с гласной, то добавляем к нему "ma".
		- Если слово начинается с согласной, то добавляем к нему первую букву и добавляем "ma".
		- Для каждого слова в конце добавляем "a".
		4. В конце мы объединяем все полученные слова в строку и возвращаем ее.

		TIME COMPLEXITY: O(n)
		Описание: Временная сложность определяется преимущественно операцией разбиения строки на слова и последующей итерацией по словам.
		Разбиение строки на слова занимает O(n), где n — длина строки. Итерация по словам и выполнение операций над каждым словом также занимает O(n).
		Таким образом, общая временная сложность составляет O(n).

		SPACE COMPLEXITY: O(n)
		Описание: Пространственная сложность определяется преимущественно использованием дополнительного пространства для хранения слов и результата.
		Массив слов и результирующий массив занимают O(n) дополнительного пространства, где n — количество символов в строке.
		Таким образом, общая пространственная сложность составляет O(n).
	*/
	// Множество гласных букв
	vowels := map[rune]bool{
		'a': true, 'e': true, 'i': true, 'o': true, 'u': true,
		'A': true, 'E': true, 'I': true, 'O': true, 'U': true,
	}

	// Разбиваем строку на слова
	words := strings.Split(sentence, " ")

	// Результирующий массив для слов в формате Goat Latin
	var result []string

	// Проходим по каждому слову
	for i, word := range words {
		var newWord string

		// Проверяем, начинается ли слово с гласной
		if vowels[rune(word[0])] {
			// Если да, добавляем "ma" в конец слова
			newWord = word + "ma"
		} else {
			// Если нет, переносим первую букву в конец и добавляем "ma"
			newWord = word[1:] + string(word[0]) + "ma"
		}

		// Добавляем "a" в зависимости от порядкового номера слова
		newWord += strings.Repeat("a", i+1)

		// Добавляем преобразованное слово в результирующий массив
		result = append(result, newWord)
	}

	// Объединяем все слова в одну строку с пробелами
	return strings.Join(result, " ")
}

func main() {
	// Пример использования
	input := "I speak Goat Latin"
	output := toGoatLatin(input)
	fmt.Println(output) // Вывод: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"
}

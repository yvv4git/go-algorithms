package _436_destination_city

func destCityV3(paths [][]string) string {
	/*
		METHOD: Список смежности / Adjacency List
		TIME COMPLEXITY: O(V)
		Space complexity: O(V)

		Time complexity
		Пространственная сложность этого алгоритма составляет O(V), где V - количество вершин (городов).
		Это связано с тем, что алгоритм проходит по всем городам ровно один раз.

		Space complexity
		Временная сложность также составляет O(V), так как алгоритм проходит по всем городам ровно один раз.

		Список смежности (Adjacency List) - это один из способов представления графа в памяти компьютера.
		В этом представлении, для каждой вершины графа создается список ее соседних вершин.
	*/

	// Создаем карту для хранения количества исходящих ребер для каждого города
	outDegree := make(map[string]int)

	// Проходим по всем путям
	for _, path := range paths {
		// Увеличиваем количество исходящих ребер для первого города в пути
		outDegree[path[0]]++
		// Если второго города в пути нет в карте, добавляем его с количеством исходящих ребер равным 0
		if _, ok := outDegree[path[1]]; !ok {
			outDegree[path[1]] = 0
		}
	}

	// Проходим по всем городам
	for city, degree := range outDegree {
		// Если количество исходящих ребер равно 0, то это конечный город
		if degree == 0 {
			return city
		}
	}

	// Если не нашли конечного города, возвращаем пустую строку
	return ""
}

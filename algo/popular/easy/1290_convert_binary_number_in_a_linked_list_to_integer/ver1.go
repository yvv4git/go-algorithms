package main

import "fmt"

// Определение структуры узла связного списка
type ListNode struct {
	Val  int       // Значение узла (0 или 1)
	Next *ListNode // Указатель на следующий узел
}

// Функция для преобразования бинарного числа в связном списке в десятичное число
func getDecimalValue(head *ListNode) int {
	/*
		МЕТОД: Linear traversal
		Линейный проход по связному списку и побитовые операции для вычисления десятичного значения.

		ВРЕМЕННАЯ СЛОЖНОСТЬ: O(n), где n — количество узлов в связном списке. Мы проходим по списку один раз.

		ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ: O(1), так как используется только константное количество дополнительной памяти.
	*/
	result := 0 // Инициализируем переменную для хранения результата

	// Проходим по всем узлам связного списка
	for head != nil {
		// Сдвигаем текущее значение result влево на 1 бит (эквивалентно умножению на 2)
		result = result << 1
		// Добавляем значение текущего узла (0 или 1) к result
		result = result | head.Val
		// Переходим к следующему узлу
		head = head.Next
	}

	// Возвращаем результат
	return result
}

// Функция main для тестирования
func main() {
	// Создаем связный список: 1 -> 0 -> 1
	head := &ListNode{Val: 1, Next: &ListNode{Val: 0, Next: &ListNode{Val: 1, Next: nil}}}

	// Вызываем функцию getDecimalValue и выводим результат
	decimalValue := getDecimalValue(head)
	fmt.Println("Десятичное значение:", decimalValue) // Вывод: Десятичное значение: 5
}

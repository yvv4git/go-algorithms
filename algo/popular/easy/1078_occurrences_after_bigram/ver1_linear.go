package main

import "strings"

func findOcurrences(text string, first string, second string) []string {
	/*
		APPROACH: Linear search
		- Разделяем текст на слова
		- Проходим по словам и проверяем, если текущее слово равно first, а следующее слово равно second
		- Если это так, добавляем третье слово в результат

		TIME COMPLEXITY: O(n), где n — это количество слов в тексте. Это связано с тем, что мы проходим по всем словам в тексте один раз.
		В худшем случае, если текст состоит из n слов, мы выполняем n итераций.
		В каждой итерации мы проверяем два условия (сравниваем текущее слово с first и следующее слово с second), что занимает константное время O(1).
		Таким образом, общая временная сложность остается линейной — O(n).

		SPACE COMPLEXITY: O(1), так как мы используем только несколько переменных для хранения промежуточных результатов (например, result для хранения найденных слов).
		Эти переменные не зависят от размера входных данных, и их количество фиксировано.
		Даже если мы добавляем слова в результат, это не увеличивает пространственную сложность, так как мы возвращаем результат в виде среза,
		который уже учитывается в возвращаемом значении функции.
	*/
	words := strings.Split(text, " ")
	var result []string

	for i := 0; i < len(words)-2; i++ {
		if words[i] == first && words[i+1] == second {
			result = append(result, words[i+2])
		}
	}

	return result
}

func main() {
	// Определяем строку текста
	text := "alice is a good girl she is a good student"
	// Определяем первое слово для поиска
	first := "a"
	// Определяем второе слово для поиска
	second := "good"
	// Вызываем функцию findOcurrences с текстом и двумя словами для поиска
	// Результатом будет слайс слов, которые следуют за последовательностью слов first и second
	result := findOcurrences(text, first, second)
	// Проходим по каждому слову в результате и выводим его
	for _, word := range result {
		println(word)
	}
}

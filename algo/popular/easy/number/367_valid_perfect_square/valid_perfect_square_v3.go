package _67_valid_perfect_square

import "math"

func isPerfectSquareV3(num int) bool {
	/*
		METHOD: Newton's method
		TIME COMPLEXITY: O(log n)

		Time complexity метода Ньютона для вычисления квадратного корня числа n в общем случае является O(log(n)),
		так как в среднем каждая итерация цикла уменьшает размер проверяемого интервала вдвое.

		Однако, в реализации, представленной выше, метод Ньютона может иметь временную сложность O(1) в случае,
		если число n является полным квадратом, так как цикл for не выполняется.

		В общем случае, временная сложность метода Ньютона зависит от точности, которую мы хотим достичь.
		Чем больше точность, тем больше итераций цикла for будет выполняться.

		В этом коде мы используем метод Ньютона для приближенного вычисления квадратного корня.
		Метод Ньютона основан на итеративном процессе, где мы приближаем квадратный корень числа n к среднему значению между x и n/x.
		Этот процесс продолжается до тех пор, пока разница между x и n/x не станет меньше некоторого маленького числа epsilon.
	*/
	x := num
	y := 1
	epsilon := 0.00001

	for float64(x-y) > epsilon {
		x = (x + y) / 2
		y = num / x
	}

	return math.Abs(float64(x*x)-float64(num)) <= epsilon
}

package main

func getRow(rowIndex int) []int {
	/*
		METHOD: Dynamic programming
		Для решения этой задачи мы можем использовать динамическое программирование, но с оптимизацией по памяти.
		Вместо создания двумерного массива для хранения всего треугольника Паскаля, мы будем использовать одномерный массив,
		который будет хранить только те элементы, которые необходимы для вычисления текущего ряда.

		TIME COMPLEXITY: O(rowIndex^2), так как мы проходим по каждому элементу ряда.

		SPACE COMPLEXITY: O(rowIndex), так как мы храним только те элементы, которые необходимы для вычисления текущего ряда.
	*/
	// Создаем массив для хранения ряда треугольника Паскаля
	row := make([]int, rowIndex+1)
	// Первый и последний элемент каждого ряда равен 1
	row[0] = 1
	row[rowIndex] = 1

	// Проходим по каждому ряду треугольника Паскаля
	for i := 1; i <= rowIndex; i++ {
		// Проходим по каждому элементу текущего ряда, начиная с конца
		for j := i - 1; j > 0; j-- {
			// Вычисляем текущий элемент как сумму двух предыдущих
			row[j] = row[j] + row[j-1]
		}
		// Первый элемент каждого следующего ряда равен 1
		row[i] = 1
	}

	return row
}

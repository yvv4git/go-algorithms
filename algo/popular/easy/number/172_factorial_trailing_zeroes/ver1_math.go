package main

import "fmt"

func trailingZeroes(n int) int {
	/*
		METHOD: Math
		Используемый подход основан на подсчете количества пар чисел (2, 5), которые входят в состав чисел от 1 до n.
		Так как 2 встречается чаще, чем 5, нас интересует только количество 5 в составе чисел.
		Для этого мы проходимся по числам, которые делятся на 5 без остатка, и считаем их количество.

		TIME COMPLEXITY: O(log n), так как мы проходимся по числам от 5 до n, увеличивая шаг в 5 раз за итерацию.
		Это позволяет нам пройтись по всем числам, которые являются делителями n!.

		SPACE COMPLEXITY: O(1), так как мы используем только несколько переменных для хранения промежуточных результатов и итогового ответа.
	*/
	// Инициализируем счетчик нулей равным 0
	count := 0

	// Для каждого числа от 1 до n
	for i := 5; i <= n; i *= 5 {
		// Пока число делится на 5 без остатка, увеличиваем счетчик нулей на количество таких чисел
		count += n / i
	}

	// Возвращаем счетчик нулей
	return count
}

func main() {
	// Пример использования функции
	fmt.Println(trailingZeroes(30)) // Вывод: 7
}

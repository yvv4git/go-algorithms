package main

func trailingZeroesV2(n int) int {
	/*
		METHOD: Math
		Этот алгоритм работает, потому что каждое число, которое делится на 5, дает еще один 0 в конце факториала.
		Так как число 2 встречается чаще, чем число 5, нас интересует только количество 5 в составе чисел.

		TIME COMPLEXITY: O(log n), так как мы проходимся по числам от 5 до n, увеличивая шаг в 5 раз за итерацию.
		Это позволяет нам пройтись по всем числам, которые являются делителями n!.

		SPACE COMPLEXITY: O(1), так как мы используем только несколько переменных для хранения промежуточных результатов и итогового ответа.
	*/
	count := 0
	for i := 5; i <= n; i *= 5 {
		count += n / i
	}
	return count
}

//func main() {
//	fmt.Println(trailingZeroes(30)) // Вывод: 7
//}

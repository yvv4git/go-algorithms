package main

import (
	"math"
)

// Функция для вычисления максимального количества полных рядов монет
func arrangeCoinsV2(n int) int {
	/*
		METHOD: Math
		Квадратное уравнение, используемое в этом решении, является результатом математического анализа задачи.
		Мы хотим найти максимальное количество полных рядов монет, которое можно составить из n монет.

		Рассмотрим первый ряд с одной монетой, второй ряд с двумя монетами, третий ряд с тремя монетами и так далее.
		Если x - это количество полных рядов, которое мы можем составить, то сумма монет в этих x рядах будет равна 1 + 2 + 3 + ... + x,
		которая является арифметической прогрессией.

		Сумма первых x членов арифметической прогрессии 1 + 2 + 3 + ... + x можно вычислить по формуле суммы арифметической прогрессии: (x * (x + 1)) / 2.

		Теперь мы хотим найти x такое, что сумма монет в x рядах равна n.
		Это означает, что мы должны решить квадратное уравнение:
		(x * (x + 1)) / 2 = n

		Умножим обе части на 2, чтобы упростить дробь:
		x^2 + x - 2n = 0
		Это квадратное уравнение, которое мы решаем для нахождения x.


		TIME COMPLEXITY: O(1), так как мы выполняем фиксированное количество арифметических операций,
		не зависящих от размера входных данных n.
		Вычисление корня и арифметические операции с плавающей точкой выполняются за константное время.

		SPACE COMPLEXITY: O(1), так как мы используем небольшое количество переменных для хранения промежуточных значений,
		не зависящих от размера входных данных.
	*/
	// Используем квадратное уравнение для нахождения количества рядов
	// x^2 + x - 2n = 0
	// Решение уравнения: x = (-1 + sqrt(1 + 8n)) / 2
	x := (-1 + math.Sqrt(float64(1+8*n))) / 2
	// Возвращаем целое число рядов, округляя вниз, так как мы не можем составить неполный ряд
	return int(x)
}

//func main() {
//	// Пример использования функции
//	n := 5
//	fmt.Println(arrangeCoinsV2(n)) // Вывод: 2
//}

package main

import "fmt"

// Функция для вычисления максимального количества полных рядов монет
func arrangeCoins(n int) int {
	/*
		METHOD: Binary search
		Для решения этой задачи мы можем использовать бинарный поиск, так как порядок рядов монет является арифметической прогрессией.

		TIME COMPLEXITY: O(log n), так как мы используем бинарный поиск, который каждый раз делит пространство поиска на пополам.

		SPACE COMPLEXITY: O(1), так как мы используем только несколько переменных для хранения промежуточных значений,
		не зависящих от размера входных данных.
	*/
	// Инициализируем границы бинарного поиска
	left, right := 0, n
	// Бинарный поиск
	for left <= right {
		// Вычисляем середину текущего диапазона
		mid := left + (right-left)/2
		// Вычисляем количество монет, которое можно разместить в mid рядов
		coins := mid * (mid + 1) / 2
		// Если количество монет больше n, то искомый ряд находится в левой половине
		if coins > n {
			right = mid - 1
		} else {
			// Иначе искомый ряд находится в правой половине
			left = mid + 1
		}
	}

	// Возвращаем количество полных рядов, которое можно составить из монет
	return right
}

func main() {
	// Пример использования функции
	n := 5
	fmt.Println(arrangeCoins(n)) // Вывод: 2
}

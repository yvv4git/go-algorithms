package main

import (
	"fmt"
)

func dominantIndex(nums []int) int {
	/*
		METHOD: linear search
		- Линейный поиск: Мы проходим по массиву дважды:
		  1. Для нахождения индекса наибольшего элемента.
		  2. Для проверки, что наибольший элемент в два раза больше или равен любому другому элементу.

		TIME COMPLEXITY:
		- O(n): Общая временная сложность алгоритма составляет O(n), так как мы проходим по массиву дважды, что в сумме дает 2n, что асимптотически эквивалентно O(n).

		SPACE COMPLEXITY:
		- O(1): Алгоритм использует фиксированное количество дополнительной памяти (переменные `maxIndex` и `i`), поэтому пространственная сложность составляет O(1).
	*/
	// Проверяем, что длина массива не меньше 2
	if len(nums) < 2 {
		return -1
	}

	// Находим индекс наибольшего элемента в массиве
	maxIndex := 0
	for i := 1; i < len(nums); i++ {
		if nums[i] > nums[maxIndex] {
			maxIndex = i
		}
	}

	// Проверяем, что наибольший элемент в два раза больше или равен любому другому элементу
	for i := 0; i < len(nums); i++ {
		// Пропускаем сравнение наибольшего элемента с самим собой
		if i == maxIndex {
			continue
		}
		// Если найден элемент, который не удовлетворяет условию, возвращаем -1
		if nums[i]*2 > nums[maxIndex] {
			return -1
		}
	}

	// Если все проверки пройдены, возвращаем индекс наибольшего элемента
	return maxIndex
}

func main() {
	// Примеры использования функции
	nums1 := []int{3, 6, 1, 0}
	fmt.Println(dominantIndex(nums1)) // Вывод: 1

	nums2 := []int{1, 2, 3, 4}
	fmt.Println(dominantIndex(nums2)) // Вывод: -1
}

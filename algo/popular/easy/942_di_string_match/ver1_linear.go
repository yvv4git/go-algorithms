package main

import (
	"fmt"
)

func diStringMatch(S string) []int {
	/*
		METHOD: Linear
		Данная функция решает задачу "DI String Match" путем использования двух указателей:
		- min_val, который начинает с 0.
		- max_val, который начинает с длины строки S.
		Мы проходим по строке S и добавляем числа в результирующий массив в зависимости от того,
		какой символ встречается ('I' или 'D'). В конце добавляем оставшееся значение.

		TIME COMPLEXITY: O(n)
		Временная сложность алгоритма составляет O(n), где n — длина строки S.
		Это связано с тем, что мы проходим по строке S один раз.

		SPACE COMPLEXITY: O(n)
		Пространственная сложность алгоритма составляет O(n), где n — длина строки S.
		Это связано с тем, что мы создаем результирующий массив длины n+1.
	*/
	// Инициализируем два указателя: min_val и max_val
	min_val := 0
	max_val := len(S)

	// Создаем результирующий массив длины len(S) + 1
	result := make([]int, len(S)+1)

	// Проходим по строке S
	for i, char := range S {
		if char == 'I' {
			// Если символ 'I', добавляем min_val и увеличиваем его
			result[i] = min_val
			min_val++
		} else {
			// Если символ 'D', добавляем max_val и уменьшаем его
			result[i] = max_val
			max_val--
		}
	}

	// Добавляем оставшееся значение в конец массива
	result[len(S)] = min_val

	return result
}

func main() {
	// Пример использования функции
	S := "IDID"
	fmt.Println(diStringMatch(S)) // Вывод: [0 4 1 3 2]
}

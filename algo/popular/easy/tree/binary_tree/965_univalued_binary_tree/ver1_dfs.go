package main

import "fmt"

// Функция для проверки, является ли бинарное дерево узлами одного значения
func isUnivalTree(root *TreeNode) bool {
	/*
		METHOD: DFS with recursion
		Для решения этой задачи мы можем использовать рекурсивный подход,
		где мы будем проверять каждый узел дерева на соответствие значению корня и
		вызывать рекурсивно эту функцию для левого и правого поддеревьев.

		DFS - это алгоритм обхода или поиска графа, который использует принцип "вглубь",
		т.е. он начинает с корневого узла (или случайного узла в несвязном графе)
		и идет как можно дальше по каждому измежутку, прежде чем обратно пройти по узлам.

		В контексте решения задачи, DFS используется для обхода всех узлов дерева.
		Начиная с корня, мы проверяем, что значение текущего узла совпадает с значением корня.
		Затем мы рекурсивно проверяем левое и правое поддеревья. Если в любом из поддеревьев мы находим узел с значением,
		отличным от корня, мы возвращаем false, так как дерево не является узлами одного значения.
		Если мы проверили все узлы и не обнаружили таких, мы возвращаем true.

		TIME COMPLEXITY: O(n), где n - количество узлов в дереве, так как мы проходим по каждому узлу ровно один раз.

		SPACE COMPLEXITY: O(n) в худшем случае, когда дерево является несбалансированным и высота дерева равна количеству узлов.
		В идеальном случае (когда дерево сбалансировано), пространственная сложность составляет O(log n), где log n - это глубина рекурсии.
	*/
	// Если дерево пустое, возвращаем true
	if root == nil {
		return true
	}

	// Если у текущего узла есть левый дочерний узел и его значение не равно значению корня, возвращаем false
	if root.Left != nil && root.Left.Val != root.Val {
		return false
	}

	// Если у текущего узла есть правый дочерний узел и его значение не равно значению корня, возвращаем false
	if root.Right != nil && root.Right.Val != root.Val {
		return false
	}

	// Рекурсивно вызываем функцию для левого и правого поддеревьев
	return isUnivalTree(root.Left) && isUnivalTree(root.Right)
}

func main() {
	// Пример использования функции
	root := &TreeNode{
		Val: 1,
		Left: &TreeNode{
			Val: 1,
			Left: &TreeNode{
				Val: 1,
			},
			Right: &TreeNode{
				Val: 1,
			},
		},
		Right: &TreeNode{
			Val: 1,
			Right: &TreeNode{
				Val: 1,
			},
		},
	}

	fmt.Println(isUnivalTree(root)) // Вывод: true
}

package main

import (
	"fmt"
	"math"
)

// Функция для поиска второго минимального значения в бинарном дереве.
func findSecondMinimumValue(root *TreeNode) int {
	/*
		METHOD: DFS
		Минимальное значение в дереве - это значение самого левого узла.
		Второе минимальное значение - это значение следующего по значению узла,
		который не является левым дочерним узлом самого левого узла.

		Для решения этой задачи можно использовать рекурсивный подход. Начните с корня дерева.
		Если корень имеет значение, равное минимальному значению, то перейдите к левому дочернему узлу.
		Если левого дочернего узла нет, то текущий узел является вторым минимальным значением.
		Если левое дочернее значение равно минимальному значению, то перейдите к правому дочернему узлу.
		Если правого дочернего узла нет, то текущий узел является вторым минимальным значением.
		Если правое дочернее значение равно минимальному значению, то текущий узел является вторым минимальным значением.

		TIME COMPLEXITY: O(n), где n - количество узлов в дереве, так как в худшем случае мы можем посетить каждый узел.

		SPACE COMPLEXITY: O(n), так как в худшем случае мы можем хранить n узлов в стеке рекурсии.
	*/
	// Инициализируем переменные для минимального и второго минимального значений.
	min1, min2 := root.Val, math.MaxInt64

	// Вызываем рекурсивную функцию для обхода дерева.
	dfs(root, &min1, &min2)

	// Если второе минимальное значение не изменилось, значит его не существует.
	if min2 == math.MaxInt64 {
		return -1
	}

	// Возвращаем второе минимальное значение.
	return min2
}

// Рекурсивная функция для обхода дерева.
func dfs(root *TreeNode, min1, min2 *int) {
	// Если текущий узел не существует, то выходим из рекурсии.
	if root == nil {
		return
	}

	// Если текущее значение узла больше минимального значения, но меньше второго минимального, то обновляем второе минимальное значение.
	if root.Val > *min1 && root.Val < *min2 {
		*min2 = root.Val
	}

	// Рекурсивно обходим левое и правое поддеревья.
	dfs(root.Left, min1, min2)
	dfs(root.Right, min1, min2)
}

func main() {
	// Пример использования функции.
	root := &TreeNode{
		Val: 2,
		Left: &TreeNode{
			Val: 2,
		},
		Right: &TreeNode{
			Val: 5,
			Left: &TreeNode{
				Val: 5,
			},
			Right: &TreeNode{
				Val: 7,
			},
		},
	}

	fmt.Println(findSecondMinimumValue(root)) // Вывод: 5
}

package main

// Функция поиска в BST
func searchBST(root *TreeNode, val int) *TreeNode {
	/*
		METHOD: BST
		TIME COMPLEXITY: O(n), где n - количество узлов в дереве. Это
		Space complexity: O(1)

		Space complexity
		В среднем случае временная сложность будет меньше, если дерево сбалансировано.
		В этом случае временная сложность будет O(log n), где n - количество узлов в дереве.
		Это происходит, когда мы можем "отсекать" половину дерева в каждом рекурсивном вызове.

		Space complexity
		В среднем случае пространственная сложность будет меньше, если дерево сбалансировано.
		В этом случае пространственная сложность будет O(log n), так как в стеке вызовов функции может храниться log n рекурсивных вызовов.

		Пространственная сложность функции searchBST в худшем случае (когда дерево является сбалансированным) составляет O(n),
		так как в стеке вызовов функции может храниться n рекурсивных вызовов.
	*/
	// Базовый случай: если узел пустой, значит, искомого значения в дереве нет
	if root == nil {
		return nil
	}

	// Если значение в текущем узле равно искомому, возвращаем узел
	if root.Val == val {
		return root
	}

	// Если значение в текущем узле больше искомого, ищем в левом поддереве
	if root.Val > val {
		return searchBST(root.Left, val)
	}

	// Если значение в текущем узле меньше искомого, ищем в правом поддереве
	return searchBST(root.Right, val)
}

package main

func searchBSTV2(root *TreeNode, val int) *TreeNode {
	/*
		METHOD: BST iterative
		TIME COMPLEXITY: O(n), в худшем случае и O(log n) если дерево сбалансированное
		Space complexity: O(1), т.к. не используем дополнительной памяти

		Time complexity
		Временная сложность функции searchBSTV2 в худшем случае (когда дерево является сбалансированным) составляет O(n),
		где n - количество узлов в дереве. Это происходит, когда мы должны обойти все узлы дерева, например,
		если искомое значение находится в крайнем левом узле.

		В среднем случае временная сложность будет меньше, если дерево сбалансировано.
		В этом случае временная сложность будет O(log n), где n - количество узлов в дереве.
		Это происходит, когда мы можем "отсекать" половину дерева в каждой итерации цикла.

		Space complexity
		Пространственная сложность функции searchBSTV2 составляет O(1), так как мы не используем дополнительное пространство,
		зависящее от размера входных данных. Мы используем только некоторые переменные, но их количество не зависит от размера дерева.
	*/
	for root != nil && root.Val != val {
		if root.Val > val {
			root = root.Left
		} else {
			root = root.Right
		}
	}

	return root
}

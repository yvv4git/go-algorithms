package main

func rangeSumBSTV3(root *TreeNode, low int, high int) int {
	/*
		Method: DFS
		Time complexity: O(n), где n - количество узлов в дереве, так как мы проходим по каждому узлу.
		Space complexity: O(log n), так как не посещаем часть узлов.

		Данный код представляет оптимизированный алгоритм для нахождения суммы значений узлов в бинарном дереве поиска,
		которые находятся в диапазоне от low до high включительно.

		Основная идея оптимизации заключается в том, чтобы избегать ненужных посещений узлов дерева.
		Вместо того, чтобы проходить по всему дереву, мы пропускаем узлы, которые не могут быть в диапазоне.
		1. Если узел пустой (root == nil), мы возвращаем 0, так как сумма пустого дерева равна 0.
		2. Если значение узла меньше low, мы знаем, что все узлы в левом поддереве также меньше low, поэтому мы не посещаем их.
		Мы продолжаем поиск в правом поддереве.
		3. Если значение узла находится в диапазоне от low до high включительно, мы добавляем его значение к сумме,
		а затем продолжаем поиск в левом и правом поддеревьях.
		4. Если значение узла больше high, мы знаем, что все узлы в правом поддереве также больше high,
		поэтому мы не посещаем их. Мы продолжаем поиск в левом поддереве.

		Таким образом, мы избегаем ненужных посещений узлов, что позволяет ускорить выполнение алгоритма.
	*/

	// Если узел пустой, возвращаем 0, так как сумма пустого дерева равна 0
	if root == nil {
		return 0
	}

	if root.Val < low {
		// Если значение узла меньше low, мы знаем, что все узлы в левом поддереве также меньше low,
		// поэтому мы не посещаем их. Мы продолжаем поиск в правом поддереве.
		return rangeSumBSTV3(root.Right, low, high)
	} else if root.Val <= high {
		// Если значение узла находится в диапазоне от low до high включительно, мы добавляем его значение к сумме,
		// а затем продолжаем поиск в левом и правом поддеревьях.
		return root.Val + rangeSumBSTV3(root.Left, low, high) + rangeSumBSTV3(root.Right, low, high)
	} else {
		// Если значение узла больше high, мы знаем, что все узлы в правом поддереве также больше high,
		// поэтому мы не посещаем их. Мы продолжаем поиск в левом поддереве.
		return rangeSumBSTV3(root.Left, low, high)
	}
}

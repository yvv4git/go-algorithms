package main

// Функция для нахождения максимальной глубины дерева с помощью BFS
func maxDepthBFS(root *Node) int {
	/*
		METHOD: BFS
		Для решения задачи нахождения максимальной глубины N-арного дерева существует еще один подход,
		который основан на обходе в ширину (Breadth-First Search, BFS).
		В этом подходе мы обходим дерево по уровням, начиная с корня, и каждый уровень считается одним шагом глубины.

		TIME COMPLEXITY: O(n), где n - количество узлов в дереве.

		SPACE COMPLEXITY: O(w), где w - ширина самого широкого уровня в дереве (наибольшее количество узлов на любом уровне).
	*/
	// Базовый случай: если дерево пустое, то его глубина равна 0
	if root == nil {
		return 0
	}

	// Инициализация переменной для отслеживания максимальной глубины
	res := 0

	// Обход узлов дерева с использованием очереди
	queue := []*Node{root}

	for len(queue) > 0 {
		// Увеличение глубины на 1 за каждый цикл, так как мы переходим на следующий уровень
		res++

		// Получение количества узлов на текущем уровне
		levelSize := len(queue)

		// Обработка всех узлов на текущем уровне
		for i := 0; i < levelSize; i++ {
			// Извлечение узла из очереди
			node := queue[0]
			queue = queue[1:]

			// Добавление дочерних узлов в очередь для дальнейшего обхода
			for _, child := range node.Children {
				queue = append(queue, child)
			}
		}
	}

	// Возврат максимальной глубины дерева
	return res
}

//func main() {
//	// Пример использования функции maxDepthBFS
//	root := &Node{
//		Val: 1,
//		Children: []*Node{
//			{Val: 3, Children: []*Node{
//				{Val: 5},
//				{Val: 6},
//			}},
//			{Val: 2},
//			{Val: 4},
//		},
//	}
//
//	fmt.Println(maxDepthBFS(root)) // Вывод: 3
//}

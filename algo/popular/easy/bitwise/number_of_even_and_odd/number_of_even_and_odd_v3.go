package number_of_even_and_odd

func evenOddBitV3(n int) []int {
	/*
		Method: Bitwise
		Time complexity: O(log(n))
		Space complexity: O(1)
	*/
	result := []int{0, 0}
	var p int = 0

	for n > 0 { // Так как бит за битом сдвигаются вправо, то надо прекратить эту процедуру, когда пройдемся по всем битам числа
		if n%2 == 1 { // Если число делится на 2 без остатка - это четное(even) число, иначе нечетное(odd).
			/*
				В какую позицию записать единицу:
					- если 1 находится на четном(even) индексе бинарного представления числа - отправляем в ответ по индексу 0.
					- если 1 находится на нечетном(odd) индексе бинарного представление числа - отправляем в ответ по индексу 1.
			*/
			result[p%2]++
		}
		p++
		n /= 2 // Эквивалентно right shift, сдвигу право
	}

	return result
}

package main

func findKthPositive(arr []int, k int) int {
	/*
		METHOD: Linear Search
		Описание метода:
		Метод использует линейный поиск для нахождения k-го пропущенного числа в отсортированном массиве.
		Алгоритм работает следующим образом:
		1. Инициализируется переменная `missing`, которая отслеживает текущее число, которое может быть пропущено.
		2. Инициализируется переменная `count`, которая отслеживает количество найденных пропущенных чисел.
		3. Инициализируется переменная `i`, которая используется для итерации по массиву.
		4. В цикле while (count < k) проверяется:
		   - Если индекс `i` вышел за пределы массива или текущее число `missing` меньше числа в массиве `arr[i]`,
		     то это означает, что число `missing` пропущено. Увеличиваем счетчик `count` и проверяем,
		     не достигли ли мы k-го пропущенного числа. Если да, возвращаем `missing`.
		   - Если текущее число `missing` равно числу в массиве `arr[i]`, то это число не пропущено,
		     и мы переходим к следующему числу в массиве, увеличивая `i`.
		5. Если цикл завершился, возвращаем текущее значение `missing`.

		Time complexity: O(n)
		- В худшем случае алгоритм проходит по всем элементам массива один раз, что занимает O(n) времени,
		  где n — длина массива.

		Space complexity: O(1)
		- Алгоритм использует только константное количество дополнительной памяти для переменных `missing`,
		  `count` и `i`, поэтому пространственная сложность составляет O(1).
	*/
	// Текущее пропущенное число
	missing := 1
	// Счетчик найденных пропущенных чисел
	count := 0
	// Индекс в массиве
	i := 0

	// Продолжаем поиск, пока не найдем k-е пропущенное число
	for count < k {
		// Если дошли до конца массива или текущее число меньше числа в массиве
		if i >= len(arr) || missing < arr[i] {
			// Увеличиваем счетчик пропущенных чисел
			count++
			// Если нашли k-е пропущенное число
			if count == k {
				return missing
			}
			missing++
		} else if missing == arr[i] {
			// Если текущее число есть в массиве, двигаемся дальше
			missing++
			i++
		}
	}

	return missing
}

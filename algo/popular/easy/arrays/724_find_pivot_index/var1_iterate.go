package main

import "fmt"

// Функция для поиска опорного индекса
func pivotIndex(nums []int) int {
	/*
		METHOD: Iterate
		Для решения этой задачи мы можем использовать два прохода по массиву.
		В первом проходе мы вычисляем сумму всех элементов массива.
		Во втором проходе мы поддерживаем текущую сумму слева от текущего элемента и проверяем,
		если сумма справа равна сумме слева, то этот элемент является опорным.

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве, потому что мы проходим по массиву два раза.

		SPACE COMPLEXITY: O(1), так как мы используем только несколько переменных для хранения сумм и индекса.
	*/
	// Вычисляем сумму всех элементов массива
	var sum int
	for _, num := range nums {
		sum += num
	}

	// Инициализируем текущую сумму слева
	var leftSum int

	// Проходим по массиву
	for i, num := range nums {
		// Если сумма справа равна сумме слева, то этот элемент является опорным
		if leftSum == sum-leftSum-num {
			return i
		}
		// Обновляем текущую сумму слева
		leftSum += num
	}

	// Если опорного элемента не нашлось, возвращаем -1
	return -1
}

func main() {
	// Пример использования функции pivotIndex
	nums := []int{1, 7, 3, 6, 5, 6}
	pivot := pivotIndex(nums)
	fmt.Printf("Опорный индекс: %d\n", pivot)
}

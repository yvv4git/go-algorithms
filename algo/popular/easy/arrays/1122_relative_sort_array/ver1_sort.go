package main

// Функция relativeSortArray сортирует массив arr1 в соответствии с порядком элементов в arr2,
// а также сохраняет порядок оставшихся элементов, которые не указаны в arr2.
func relativeSortArray(arr1 []int, arr2 []int) []int {
	/*
		METHOD: Sort

		TIME COMPLEXITY: O(n^2), где n - количество элементов в arr1.
		Это обусловлено двумя вложенными циклами, которые проходят по всем элементам массивов.

		SPACE COMPLEXITY: O(1), так как мы используем лишь несколько переменных для отслеживания индекса и выполнения обмена элементов.
		В результате, используемая память не зависит от размера входных массивов и остается постоянной.
	*/
	// Инициализируем индекс для отслеживания позиции, на которую будет вставляться следующий элемент из arr2.
	index := 0

	// Проходим по каждому элементу arr2.
	for _, value := range arr2 {
		// Проходим по каждому элементу arr1.
		for j := range arr1 {
			// Если текущий элемент arr1 совпадает с элементом arr2, меняем местами элементы arr1[index] и arr1[j].
			if arr1[j] == value {
				arr1[index], arr1[j] = arr1[j], arr1[index]
				// Увеличиваем индекс, чтобы следующий элемент arr2 поместился на следующую позицию.
				index++
			}
		}
	}

	// Если все элементы arr2 были найдены в arr1, но еще остались неотсортированные элементы в arr1,
	// то сортируем оставшиеся элементы.
	if index < len(arr1) {
		// Сортируем оставшиеся элементы в arr1 с помощью пузырьковой сортировки.
		for i := index; i < len(arr1)-1; i++ {
			for j := i + 1; j < len(arr1); j++ {
				if arr1[i] > arr1[j] {
					arr1[i], arr1[j] = arr1[j], arr1[i]
				}
			}
		}
	}

	// Возвращаем отсортированный массив arr1.
	return arr1
}

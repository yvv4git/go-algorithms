package main

import "fmt"

// findLengthOfLCIS находит длину самой длинной подпоследовательности возрастающих чисел в массиве nums.
func findLengthOfLCIS(nums []int) int {
	/*
		METHOD: Two pointers
		Для решения этой задачи мы будем использовать подход с двумя указателями.
		Один указатель будет отслеживать начало текущей подпоследовательности, а второй - конец.
		Мы будем двигать второй указатель вправо, пока подпоследовательность будет возрастающей.
		Как только подпоследовательность перестанет быть возрастающей, мы обновим максимальную длину
		и переместим первый указатель на следующий элемент после начала текущей подпоследовательности.

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве, так как мы проходим по массиву всего один раз.

		SPACE COMPLEXITY: O(1), так как мы используем не более константного количества дополнительной памяти.
	*/
	// Если массив пустой, то длина подпоследовательности равна 0.
	if len(nums) == 0 {
		return 0
	}

	// Инициализируем указатели на начало и конец текущей подпоследовательности.
	start := 0
	maxLength := 1

	// Проходим по массиву, начиная со второго элемента.
	for i := 1; i < len(nums); i++ {
		// Если текущий элемент меньше предыдущего, значит, подпоследовательность закончилась.
		if nums[i] <= nums[i-1] {
			// Обновляем максимальную длину, если текущая подпоследовательность длиннее.
			if i-start > maxLength {
				maxLength = i - start
			}
			// Перемещаем начало новой подпоследовательности на следующий элемент.
			start = i
		}
	}

	// Проверяем последнюю подпоследовательность после выхода из цикла.
	if len(nums)-start > maxLength {
		maxLength = len(nums) - start
	}

	// Возвращаем максимальную длину подпоследовательности.
	return maxLength
}

func main() {
	nums := []int{1, 3, 5, 4, 7}
	fmt.Println(findLengthOfLCIS(nums)) // Выведет: 3
}

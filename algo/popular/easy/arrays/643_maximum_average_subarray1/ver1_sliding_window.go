package main

import "fmt"

// Функция для поиска максимального среднего значения подмассива
func findMaxAverage(nums []int, k int) float64 {
	/*
		METHOD: Sliding window
		Используемый подход - это окно скользящего среднего.
		Мы находим сумму первых k элементов и потом просто сдвигаем окно вправо, вычитая крайний левый элемент и добавляя новый элемент справа.
		Если сумма увеличивается, мы обновляем максимальную сумму. В конце мы возвращаем максимальную сумму, разделенную на k,
		чтобы получить максимальное среднее значение.


		TIME COMPLEXITY: O(n), где n - количество элементов в массиве nums.
		Это обусловлено тем, что мы проходим по массиву всего один раз.

		SPACE COMPLEXITY: O(1), так как мы используем некоторые фиксированные объемы памяти для хранения суммы и максимальной суммы.
	*/
	// Инициализируем переменную для хранения суммы первых k элементов
	sum := 0
	for i := 0; i < k; i++ {
		sum += nums[i]
	}

	// Инициализируем переменную для хранения максимальной суммы
	maxSum := sum

	// Проходим по оставшейся части массива
	for i := k; i < len(nums); i++ {
		// Вычитаем из суммы крайний левый элемент и добавляем новый элемент справа
		sum = sum - nums[i-k] + nums[i]
		// Обновляем максимальную сумму, если текущая больше
		if sum > maxSum {
			maxSum = sum
		}
	}

	// Возвращаем максимальное среднее значение, найденное в подмассиве
	return float64(maxSum) / float64(k)
}

func main() {
	nums := []int{1, 12, -5, -6, 50, 3}
	k := 4
	fmt.Println(findMaxAverage(nums, k)) // Вывод: 12.75
}

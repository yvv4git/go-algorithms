package main

import "fmt"

func isOneBitCharacter(bits []int) bool {
	/*
		METHOD: Iterative
		Мы будем идти с конца массива и проверять каждый элемент, чтобы определить, является ли он одним или двумя битами.
		Если мы встречаем число 1, то следующий символ должен быть двухбитным, поэтому мы переходим к следующему символу.
		Если мы встречаем число 0, то это однобитный символ, и мы переходим к предыдущему символу.

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве, потому что мы проходим по всему массиву только один раз.

		SPACE COMPLEXITY: O(1), так как мы используем некоторые переменные для отслеживания позиции и не храним дополнительные структуры данных.
	*/
	// Инициализируем переменную для отслеживания позиции
	i := 0
	// Проходим по всем элементам массива
	for i < len(bits)-1 {
		// Если текущий элемент равен 1, то следующий символ должен быть двухбитным
		// Поэтому переходим к следующему символу
		if bits[i] == 1 {
			i += 2
		} else {
			// Если текущий элемент равен 0, то это однобитный символ
			// Поэтому переходим к следующему символу
			i++
		}
	}
	// Если мы дошли до последнего символа и он однобитный, то возвращаем true
	// Иначе возвращаем false
	return i == len(bits)-1
}

func main() {
	bits := []int{1, 1, 1, 0}
	fmt.Println(isOneBitCharacter(bits)) // Выводит: true
}

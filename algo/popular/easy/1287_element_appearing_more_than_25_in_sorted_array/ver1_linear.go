package main

import "fmt"

// Функция для поиска элемента, который встречается более чем 25% раз в отсортированном массиве
func findSpecialInteger(arr []int) int {
	/*
		METHOD: Linear
		Используется линейный проход по отсортированному массиву с проверкой элементов на расстоянии threshold.
		Поскольку массив отсортирован, все одинаковые элементы расположены рядом. Мы проверяем, совпадает ли текущий
		элемент с элементом, находящимся на расстоянии threshold. Если совпадает, это означает, что данный элемент
		встречается более чем 25% раз.

		- Поскольку массив отсортирован, все одинаковые элементы расположены рядом.
		- Если элемент встречается более чем 25% раз, то на расстоянии threshold от текущего элемента будет находиться тот же элемент.
		- Например, если элемент 6 встречается 4 раза в массиве длины 8, то на расстоянии 2 (порог) от первого вхождения 6 будет тоже 6.



		TIME COMPLEXITY: O(n)
		В худшем случае мы проходим по массиву один раз, выполняя проверку для каждого элемента. Таким образом,
		временная сложность составляет O(n), где n — длина массива.

		SPACE COMPLEXITY: O(1)
		Мы используем только константное количество дополнительной памяти (переменные n, threshold, i), поэтому
		пространственная сложность составляет O(1).
	*/
	n := len(arr)      // Длина массива
	threshold := n / 4 // Порог: сколько раз элемент должен встретиться (более 25%)

	// Проходим по массиву, проверяя каждый элемент
	for i := 0; i < n-threshold; i++ {
		// Если текущий элемент равен элементу, который находится на расстоянии threshold,
		// значит, этот элемент встречается более чем 25% раз
		if arr[i] == arr[i+threshold] {
			return arr[i] // Возвращаем найденный элемент
		}
	}

	return -1 // Если такого элемента нет (хотя по условию задачи он всегда есть)
}

func main() {
	// Пример использования
	arr := []int{1, 2, 2, 6, 6, 6, 6, 7, 10}
	result := findSpecialInteger(arr)
	fmt.Println("Элемент, встречающийся более чем 25% раз:", result)
}

package main

import "sort"

func wiggleSortV3(nums []int) {
	/*
		METHOD: Используется метод сортировки и разделения массива на две части.
		После сортировки массива, он разделяется на две части:
		элементы меньше или равные среднему элементу и элементы больше среднего.
		Затем элементы чередуются для достижения условия "wiggle sort".

		TIME COMPLEXITY: O(n log n) из-за сортировки массива.

		SPACE COMPLEXITY: O(n) для дополнительного массива sorted.
	*/
	// Создаем копию исходного массива и сортируем её
	sorted := make([]int, len(nums))
	copy(sorted, nums)
	sort.Ints(sorted)

	// Определяем индексы для разделения массива
	mid := (len(nums) - 1) / 2 // Индекс среднего элемента
	right := len(nums) - 1     // Индекс последнего элемента

	// Чередуем элементы из двух частей массива
	for i := range nums {
		if i%2 == 0 {
			// Для четных индексов берем элементы из левой части
			nums[i] = sorted[mid]
			mid--
		} else {
			// Для нечетных индексов берем элементы из правой части
			nums[i] = sorted[right]
			right--
		}
	}
}

package main

import (
	"container/heap"
	"fmt"
)

type MinHeap []int

func (h MinHeap) Len() int           { return len(h) }
func (h MinHeap) Less(i, j int) bool { return h[i] < h[j] }
func (h MinHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *MinHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}

func (h *MinHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

// Функция для нахождения n-го супер уродливого числа
func nthSuperUglyNumber(n int, primes []int) int {
	/*
		METHOD: Min heap
		1. Используем минимальную кучу (минимальную очередь с приоритетами) для генерации супер уродливых чисел в порядке возрастания.
		2. Начинаем с числа 1 и добавьте его в кучу.
		3. Пока не найдете n-ое число:
		3.1. Извлекаем минимальное число из кучи.
		3.2. Для каждого простого числа из заданного набора умножаем извлеченное число на это простое число и добавляем результат в кучу, если он еще не был добавлен.
		4. Возвращаем n-ое извлеченное число.

		Этот подход гарантирует, что мы генерируем супер уродливые числа в правильном порядке и быстро находим n-ое число.

		TIME COMPLEXITY: O(n * k * log(n)), где n — это номер супер уродливого числа, которое нужно найти, а k — количество простых чисел в заданном наборе.

		SPACE COMPLEXITY: O(n), т.к. куча может содержать до n элементов, поэтому пространственная сложность составляет


		Простое число — это натуральное число, которое имеет ровно два различных натуральных делителя: единицу и само себя.
		Другими словами, простое число не может быть разложено на множители, кроме как на 1 и само на себя.
		Например, числа 2, 3, 5, 7, 11, 13, 17 и т.д. являются простыми, так как они делятся только на 1 и на самих себя.
	*/
	// Создаем минимальную кучу
	h := &MinHeap{}
	heap.Init(h)
	heap.Push(h, 1)

	// Множество для отслеживания уже добавленных чисел
	seen := map[int]bool{1: true}

	// Переменная для хранения текущего числа
	current := 1

	for i := 0; i < n; i++ {
		// Извлекаем минимальное число из кучи
		current = heap.Pop(h).(int)

		// Для каждого простого числа из набора
		for _, prime := range primes {
			next := current * prime
			// Если число еще не было добавлено, добавляем его в кучу
			if !seen[next] {
				heap.Push(h, next)
				seen[next] = true
			}
		}
	}

	return current
}

func main() {
	n := 12
	primes := []int{2, 3, 5}
	fmt.Println(nthSuperUglyNumber(n, primes)) // Вывод: 16
}

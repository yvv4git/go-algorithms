package main

func countNumbersWithUniqueDigits(n int) int {
	/*
		METHOD: Dynamic programming
		Задача решается с помощью динамического программирования.
		Мы будем использовать массив dp, где dp[i] будет содержать количество уникальных чисел,
		которые могут быть получены из i цифр.

		TIME COMPLEXITY: O(n), так как мы проходимся по всем числам от 0 до n.

		SPACE COMPLEXITY: O(n), так как мы используем дополнительный массив dp размером n.
	*/
	if n == 0 {
		return 1
	}

	// Инициализируем массив dp, где dp[i] будет содержать количество уникальных чисел, которые могут быть получены из i цифр
	dp := make([]int, n+1)

	// Базовый случай: количество уникальных чисел, которые могут быть получены из 0 цифр, равно 1
	dp[0] = 1

	// Базовый случай: количество уникальных чисел, которые могут быть получены из 1 цифры, равно 10
	dp[1] = 10

	// Количество уникальных чисел, которые могут быть получены из 2 цифр, равно 9 * 9, так как первая цифра может быть любой, а вторая - любая, кроме той, что использовалась в первой
	for i := 2; i <= n; i++ {
		dp[i] = dp[i-1] + (dp[i-1]-dp[i-2])*(10-(i-1))
	}

	// Возвращаем количество уникальных чисел, которые могут быть получены из n цифр
	return dp[n]
}

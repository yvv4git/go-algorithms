package main

import "fmt"

// Функция numIslands принимает двумерный массив grid и возвращает количество островов.
func numIslands(grid [][]byte) int {
	/*
		METHOD: DFS
		В данном случае используется поиск в глубину (DFS) для того, чтобы эффективно исследовать
		и маркировать все ячейки земли, которые составляют один остров.
		DFS подходит для этой задачи по нескольким причинам:
		1. Простота реализации
		DFS легко реализуется с использованием рекурсии, что делает код более компактным и читаемым.
		2. Полное исследование
		DFS гарантирует, что все ячейки, соединенные с начальной ячейкой земли,
		будут посещены и помечены как посещенные (в данном случае, установлены в '0'),
		прежде чем алгоритм перейдет к исследованию других островов.
		3. Эффективность в данном контексте
		Поскольку каждая ячейка может быть соединена только с четырьмя соседними ячейками (вверх, вниз, влево, вправо),
		DFS позволяет быстро маркировать все соединенные ячейки земли, не требуя дополнительных структур данных для хранения состояния.

		TIME COMPLEXITY: O(M * N), где M — количество строк, а N — количество столбцов в матрице.
		Это связано с тем, что мы посещаем каждую ячейку не более одного раза.

		SPACE COMPLEXITY: O(M * N) в худшем случае, если все ячейки являются землей, и мы используем рекурсию для DFS.
		Глубина рекурсии может достигать M * N.
	*/
	if len(grid) == 0 {
		return 0
	}

	numIslands := 0
	rows, cols := len(grid), len(grid[0])

	// Функция dfs выполняет поиск в глубину для маркировки всех соединенных ячеек земли.
	var dfs func(r, c int)
	dfs = func(r, c int) {
		if r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] == '0' {
			return
		}
		grid[r][c] = '0' // Помечаем ячейку как посещенную, устанавливая её в '0'.
		dfs(r+1, c)      // Вниз
		dfs(r-1, c)      // Вверх
		dfs(r, c+1)      // Вправо
		dfs(r, c-1)      // Влево
	}

	// Проходим по каждой ячейке матрицы.
	for i := 0; i < rows; i++ {
		for j := 0; j < cols; j++ {
			if grid[i][j] == '1' {
				numIslands++
				dfs(i, j)
			}
		}
	}

	return numIslands
}

func main() {
	grid := [][]byte{
		{'1', '1', '0', '0', '0'},
		{'1', '1', '0', '0', '0'},
		{'0', '0', '1', '0', '0'},
		{'0', '0', '0', '1', '1'},
	}
	fmt.Println(numIslands(grid)) // Вывод: 3
}

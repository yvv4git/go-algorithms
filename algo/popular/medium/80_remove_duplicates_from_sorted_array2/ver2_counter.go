package main

func removeDuplicatesV2(nums []int) int {
	/*
		METHOD: Counter

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве.

		SPACE COMPLEXITY: O(1), так как мы используем только несколько дополнительных переменных для отслеживания счетчика
		и индекса, не зависящих от размера входных данных.
	*/
	n := len(nums)
	if n <= 2 {
		return n
	}

	// Инициализируем счетчик для отслеживания количества вхождений каждого элемента
	count := 1
	// Инициализируем указатель для отслеживания позиции, куда можно поместить следующий уникальный элемент
	index := 1

	for i := 1; i < n; i++ {
		// Если текущий элемент равен предыдущему
		if nums[i] == nums[i-1] {
			// Увеличиваем счетчик
			count++
		} else {
			// Сбрасываем счетчик
			count = 1
		}

		// Если счетчик меньше или равен 2, то помещаем текущий элемент в позицию index
		if count <= 2 {
			nums[index] = nums[i]
			index++
		}
	}

	// Возвращаем новую длину массива
	return index
}

//func main() {
//	nums := []int{1, 1, 1, 2, 2, 3}
//	newLength := removeDuplicates(nums)
//	fmt.Println("Новая длина массива:", newLength)
//	fmt.Println("Массив после удаления дубликатов:", nums[:newLength])
//}

package main

// Глобальная переменная, которая будет указывать на текущий узел списка
var current *ListNode

// Функция для перестановки узлов в списке так, чтобы он стал палиндромом
func reorderListV2(head *ListNode) {
	/*
		METHOD: Stack || Recursion
		TIME COMPLEXITY: O(n)
		SPACE COMPLEXITY: O(n)


		Time Complexity:
		Временная сложность этого алгоритма составляет O(N), где N - количество узлов в списке.
		Это связано с тем, что мы проходим по всем узлам списка дважды: один раз для заполнения стека, а второй раз для перестройки узлов.

		Space Complexity:
		Пространственная сложность этого алгоритма составляет O(N), где N - количество узлов в списке.
		Это связано с тем, что мы храним все узлы списка в стеке.
	*/
	// Если список пуст или содержит только один узел, то ничего не делаем
	if head == nil || head.Next == nil {
		return
	}

	// Инициализируем глобальную переменную текущего узла
	current = head

	// Вызываем рекурсивную функцию для перестановки узлов
	reorder(head)
}

// Рекурсивная функция для перестановки узлов
func reorder(node *ListNode) {
	// Если достигнут конец списка, то ничего не делаем
	if node == nil {
		return
	}

	// Рекурсивно вызываем функцию для следующего узла
	reorder(node.Next)

	// Если достигнут конец списка, то ничего не делаем
	if current == nil {
		return
	}

	// Если текущий узел и следующий узел равны, то устанавливаем следующий узел в nil
	if current == node || current.Next == node {
		node.Next = nil
		current = nil
		return
	}

	// Переставляем узлы так, чтобы они образовывали палиндром
	next := current.Next
	current.Next = node
	node.Next = next
	current = next
}

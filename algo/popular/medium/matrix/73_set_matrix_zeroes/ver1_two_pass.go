package main

import "fmt"

// Функция setZeroes принимает двумерный массив целых чисел и изменяет его таким образом,
// что если элемент равен 0, то вся строка и вся колонка, в которой находится этот элемент, становятся нулями.
func setZeroes(matrix [][]int) {
	/*
		METHOD: Two pass

		TIME COMPLEXITY: O(m*n), где m и n - количество строк и столбцов в матрице соответственно.
		Это связано с двумя вложенными циклами, которые проходятся по всем элементам матрицы.

		SPACE COMPLEXITY: O(m+n), так как используются два дополнительных среза для отметки строк и столбцов, которые нужно обнулить.
		Размер этих срезов не зависит от размера входных данных, поэтому они могут быть считаться постоянными.
	*/
	// Количество строк в матрице
	rows := len(matrix)
	// Количество столбцов в матрице
	cols := len(matrix[0])
	// Срез, используемый для отметки строк, которые нужно обнулить
	zeroRows := make([]bool, rows)
	// Срез, используемый для отметки столбцов, которые нужно обнулить
	zeroCols := make([]bool, cols)

	// Отметить строки и столбцы, которые нужно обнулить
	for i := 0; i < rows; i++ {
		for j := 0; j < cols; j++ {
			if matrix[i][j] == 0 {
				zeroRows[i] = true
				zeroCols[j] = true
			}
		}
	}

	// Сделать строки нулями
	for i := 0; i < rows; i++ {
		if zeroRows[i] {
			for j := 0; j < cols; j++ {
				matrix[i][j] = 0
			}
		}
	}

	// Сделать столбцы нулями
	for j := 0; j < cols; j++ {
		if zeroCols[j] {
			for i := 0; i < rows; i++ {
				matrix[i][j] = 0
			}
		}
	}
}

func main() {
	// Пример двумерного массива целых чисел
	matrix := [][]int{
		{1, 1, 1},
		{1, 0, 1},
		{1, 1, 1},
	}

	// Изменение матрицы
	setZeroes(matrix)

	// Вывод измененной матрицы
	fmt.Println(matrix)
}

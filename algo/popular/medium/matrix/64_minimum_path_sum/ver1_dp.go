package main

import (
	"fmt"
	"math"
)

// Функция для нахождения минимальной суммы пути
func minPathSum(grid [][]int) int {
	/*
		METHOD: Dynamic programming
		TIME COMPLEXITY: (m*n), где m и n - количество строк и столбцов в матрице соответственно. Это связано с тем, что мы проходим по каждой ячейке матрицы только один раз.
		SPACE COMPLEXITY: O(m*n), так как мы используем дополнительную матрицу dp размером mn для хранения минимальных сумм пути.
	*/
	// Получаем размеры матрицы
	rows := len(grid)
	cols := len(grid[0])

	// Создаем матрицу dp для хранения минимальных сумм пути
	dp := make([][]int, rows)
	for i := range dp {
		dp[i] = make([]int, cols)
	}

	// Инициализируем первый элемент матрицы dp
	dp[0][0] = grid[0][0]

	// Заполняем первую строку матрицы dp
	for j := 1; j < cols; j++ {
		dp[0][j] = dp[0][j-1] + grid[0][j]
	}

	// Заполняем первый столбец матрицы dp
	for i := 1; i < rows; i++ {
		dp[i][0] = dp[i-1][0] + grid[i][0]
	}

	// Заполняем остальную часть матрицы dp
	for i := 1; i < rows; i++ {
		for j := 1; j < cols; j++ {
			// Минимальная сумма пути до текущей ячейки равна
			// минимальному значению между суммой пути до соседней ячейки сверху
			// и суммой пути до соседней ячейки слева, плюс значение текущей ячейки
			dp[i][j] = int(math.Min(float64(dp[i-1][j]), float64(dp[i][j-1]))) + grid[i][j]
		}
	}

	// Возвращаем значение в нижнем правом углу матрицы dp,
	// которое и будет минимальной суммой пути
	return dp[rows-1][cols-1]
}

func main() {
	grid := [][]int{
		{1, 3, 1},
		{1, 5, 1},
		{4, 2, 1},
	}
	fmt.Println(minPathSum(grid)) // Выводит: 7
}

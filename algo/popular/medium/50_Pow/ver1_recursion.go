package main

import "fmt"

// Функция для возведения числа x в степень n.
func myPow(x float64, n int) float64 {
	/*
		METHOD: Recursion
		TIME COMPLEXITY: O(log n), так как в худшем случае мы делим степень n пополам на каждом шаге рекурсии.
		SPACE COMPLEXITY: O(log n) в худшем случае, так как нам необходимо хранить в стеке вызовов рекурсии.

		В этом коде мы используем рекурсивный подход, чтобы вычислить степень числа x.
		Мы проверяем базовые случаи, когда степень равна 0 или отрицательная,
		и применяем свойство чётности степени для уменьшения количества рекурсивных вызовов.
	*/
	// Базовый случай: если степень равна 0, возвращаем 1.
	if n == 0 {
		return 1
	}

	// Если степень отрицательная, вычисляем 1/x^n.
	if n < 0 {
		return 1 / myPow(x, -n)
	}

	// Если степень четная, используем свойство чётности степени.
	if n%2 == 0 {
		y := myPow(x, n/2)
		return y * y
	}

	// Если степень нечетная, умножаем на x.
	return x * myPow(x, n-1)
}

func main() {
	// Пример использования функции myPow.
	x := 2.0
	n := 10
	result := myPow(x, n)
	fmt.Printf("%f в степени %d равно %f\n", x, n, result)
}

package main

// Функция subsetsV2 принимает на вход массив целых чисел nums и возвращает все возможные подмножества этого массива.
func subsetsV2(nums []int) [][]int {
	/*
		METHOD: Iterative

		TIME COMPLEXITY: O(n * 2^n), где n - количество элементов в массиве nums.
		Это связано с тем, что для каждого элемента в массиве мы создаем новые подмножества, которые добавляем в результат.
		В итоге, количество подмножеств в результате растет экспоненциально с ростом количества элементов в массиве.

		SPACE COMPLEXITY: O(n * 2^n), так как мы храним все полученные подмножества в результате.
		Каждое подмножество, которое мы создаем, занимает дополнительное место в памяти.
	*/
	// Инициализируем результат с пустым подмножеством.
	res := [][]int{{}}

	// Проходим по всем элементам массива nums.
	for _, x := range nums {
		// Создаем новый массив для хранения следующих подмножеств.
		next := make([][]int, len(res))
		// Проходим по всем текущим подмножествам.
		for idy, y := range res {
			// Создаем новое подмножество, которое будет содержать все элементы текущего подмножества, плюс новый элемент x.
			next[idy] = make([]int, len(y)+1)
			// Копируем все элементы текущего подмножества в новое подмножество, чтобы избежать корректности данных среза.
			copy(next[idy], y)
			// Добавляем новый элемент x в конец нового подмножества.
			next[idy][len(y)] = x
		}
		// Добавляем все новые подмножества в результат.
		res = append(res, next...)
	}

	// Возвращаем результат.
	return res
}

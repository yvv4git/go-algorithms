package main

func canFinish(numCourses int, prerequisites [][]int) bool {
	/*
		METHOD: DFS
		Выбранный подход с использованием DFS позволяет эффективно обнаружить циклы в графе.
		Основная идея заключается в том, что если во время обхода графа мы встречаем вершину,
		которая уже находится в состоянии посещения, это означает наличие цикла.
		Если же вершина уже обработана, то цикла нет.

		Этот метод является стандартным для решения задач, связанных с топологической сортировкой
		и обнаружением циклов в ориентированных графах.
		Он обеспечивает линейное время выполнения и использует дополнительную память для хранения состояния вершин,
		что делает его эффективным и простым в реализации.

		TIME COMPLEXITY: O(V + E), где V — количество вершин (курсов), E — количество ребер (зависимостей).
		Это связано с тем, что мы посещаем каждую вершину и каждое ребро ровно один раз.

		SPACE COMPLEXITY: O(V + E), где V — количество вершин, E — количество ребер.
		Это связано с тем, что мы храним граф в виде списка смежности и массив для отслеживания состояния каждой вершины.
	*/
	// Создаем граф в виде списка смежности
	graph := make([][]int, numCourses)
	for _, pre := range prerequisites {
		graph[pre[1]] = append(graph[pre[1]], pre[0])
	}

	// Массив для отслеживания состояния каждой вершины
	// 0 - не посещена, 1 - посещается, 2 - обработана
	visited := make([]int, numCourses)

	// Функция для проверки наличия цикла с использованием DFS
	var dfs func(int) bool
	dfs = func(node int) bool {
		if visited[node] == 1 {
			// Если вершина уже посещается, значит есть цикл
			return false
		}
		if visited[node] == 2 {
			// Если вершина уже обработана, значит цикла нет
			return true
		}

		// Помечаем вершину как посещаемую
		visited[node] = 1

		// Рекурсивно посещаем все смежные вершины
		for _, neighbor := range graph[node] {
			if !dfs(neighbor) {
				return false
			}
		}

		// Помечаем вершину как обработанную
		visited[node] = 2
		return true
	}

	// Проверяем каждую вершину на наличие цикла
	for i := 0; i < numCourses; i++ {
		if visited[i] == 0 {
			if !dfs(i) {
				return false
			}
		}
	}

	return true
}

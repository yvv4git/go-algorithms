package main

// Функция nextPermutationV2 принимает на вход массив целых чисел и переставляет его элементы таким образом, чтобы получить следующую лексикографическую перестановку.
func nextPermutationV2(nums []int) {
	// Получаем длину массива
	nlen := len(nums)
	// Если длина массива меньше или равна 1, то перестановки нет
	if nlen <= 1 {
		return
	}

	// Проходим по массиву справа налево
	for i := nlen - 1; i > 0; i-- {
		// Если текущий элемент не больше предыдущего, то пропускаем итерацию
		if nums[i] <= nums[i-1] {
			continue
		}

		// Ищем индекс j такой, что nums[j] > nums[i-1] и nums[j+1] <= nums[i-1]
		j := i
		for ; j < nlen-1; j++ {
			if nums[j] > nums[i-1] && nums[j+1] <= nums[i-1] {
				break
			}
		}

		// Меняем местами элементы с индексами i-1 и j
		nums[i-1], nums[j] = nums[j], nums[i-1]
		// Переворачиваем часть массива от i до конца
		reverse2(nums[i:])
		return
	}

	// Если не удалось найти перестановку, то переворачиваем весь массив
	reverse2(nums)
}

// Функция reverse2 принимает на вход массив целых чисел и переворачивает его.
func reverse2(nums []int) {
	// Используем двух-указательный подход для переворачивания массива
	for i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {
		// Меняем местами элементы с индексами i и j
		nums[i], nums[j] = nums[j], nums[i]
	}
}

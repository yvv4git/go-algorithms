package _67_two_sum_2_Input_array_Is_sorted

// Функция twoSum использует HashMap для поиска пары чисел, сумма которых равна target.
// Если такие числа найдены, функция возвращает индексы этих чисел.
// Если таких чисел не найдено, функция возвращает [-1, -1].
func twoSumV3(numbers []int, target int) []int {
	/*
		METHOD: Hash map
		Time complexity: O(n), где n - количество элементов в массиве.
		Space complexity: O(n), поскольку в худшем случае мы можем хранить все элементы в HashMap.
	*/

	// Создаем HashMap для хранения чисел и их индексов.
	numMap := make(map[int]int)

	// Проходим по всем числам в массиве.
	for i, num := range numbers {
		// Вычисляем разницу между target и текущим числом.
		diff := target - num

		// Если разница уже есть в HashMap, то мы нашли пару чисел,
		// которые в сумме дают target.
		if j, ok := numMap[diff]; ok {
			// Возвращаем индексы этих чисел.
			return []int{j + 1, i + 1}
		}

		// Если разницы нет в HashMap, то добавляем текущее число в HashMap.
		numMap[num] = i
	}

	// Если мы дошли до этой точки, то пары чисел, которые в сумме дают target,
	// не найдено, поэтому мы возвращаем [-1, -1].
	return []int{-1, -1}
}

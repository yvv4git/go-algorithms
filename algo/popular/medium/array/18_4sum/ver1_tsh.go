package main

import (
	"fmt"
	"sort"
)

func fourSum(nums []int, target int) [][]int {
	/*
		METHOD: Two-step hashing
		TIME COMPLEXITY: O(n^2), где n - количество элементов в массиве. Это обусловлено тем, что мы проходим по массиву дважды: один раз для создания хеш-таблицы пар, а второй раз для поиска четверок.
		SPACE COMPLEXITY: O(n^2), так как в худшем случае мы можем хранить в хеш-таблице все возможные пары чисел.

		В этом коде мы сначала сортируем массив, чтобы упростить поиск.
		Затем мы используем два вложенных цикла для перебора всех возможных пар чисел.
		Внутри этих циклов мы используем два указателя, один начиная с элемента, следующего за текущей парой,
		и двигаем его вправо, а другой - с конца массива и двигаем его влево.
		Если сумма четырех чисел равна целевому значению, мы добавляем четверку в результат.
		Если сумма меньше целевого значения, мы двигаем левый указатель вправо, а если сумма больше целевого значения,
		мы двигаем правый указатель влево. Таким образом, мы находим все четверки, сумма которых равна целевому значению.
	*/
	sort.Ints(nums)            // Сортируем массив
	result := make([][]int, 0) // Хэш

	for i := 0; i < len(nums)-3; i++ {
		if i > 0 && nums[i] == nums[i-1] { // Пропускаем повторяющиеся элементы
			continue
		}

		for j := i + 1; j < len(nums)-2; j++ {
			if j > i+1 && nums[j] == nums[j-1] { // Пропускаем повторяющиеся элементы
				continue
			}

			left, right := j+1, len(nums)-1
			for left < right {
				sum := nums[i] + nums[j] + nums[left] + nums[right]
				if sum == target {
					result = append(result, []int{nums[i], nums[j], nums[left], nums[right]})
					left++
					right--

					for left < right && nums[left] == nums[left-1] { // Пропускаем повторяющиеся элементы
						left++
					}

					for left < right && nums[right] == nums[right+1] { // Пропускаем повторяющиеся элементы
						right--
					}
				} else if sum < target {
					left++
				} else {
					right--
				}
			}
		}
	}

	return result
}

func main() {
	nums := []int{1, 0, -1, 0, -2, 2}
	target := 0
	fmt.Println(fourSum(nums, target)) // Вывод: [[-2 -1 1 2] [-2 0 0 2] [-1 0 0 1]]
}

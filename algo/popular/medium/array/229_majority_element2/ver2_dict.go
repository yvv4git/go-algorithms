package main

func majorityElementV2(nums []int) []int {
	/*
		METHOD: Dict / Map

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве, потому что мы проходим по массиву дважды.

		SPACE COMPLEXITY: O(n), потому что в худшем случае мы можем хранить каждый элемент из массива в словаре.
	*/
	threshold := len(nums) / 3    // вычисляет пороговое значение, которое представляет собой количество раз, которое элемент должен встретиться, чтобы считаться "majority element".
	countMap := make(map[int]int) // инициализирует пустую map (словарь), которая будет использоваться для подсчета количества вхождений каждого элемента в массиве. Ключи в словаре - это элементы массива, а значения - это количество вхождений этих элементов.
	result := make([]int, 0)      // Инициализирует пустой срез (slice), который будет использоваться для хранения элементов, встретившихся более n/3 раз.

	// Подсчитываем количество вхождений каждого элемента
	for _, num := range nums {
		countMap[num]++
	}

	// Проверяем каждый элемент на "majority element"
	for num, count := range countMap {
		if count > threshold {
			result = append(result, num)
		}
	}

	return result
}

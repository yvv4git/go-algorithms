package main

import (
	"fmt"
)

// Функция для нахождения максимального произведения подмассива
// Временная сложность: O(n), где n - количество элементов в массиве nums
// Пространственная сложность: O(1), так как мы используем фиксированное количество переменных, не зависящих от размера входного массива
func maxProduct(nums []int) int {
	/*
		METHOD: Dynamic programming
		В данном решении используется подход динамического программирования (Dynamic Programming, DP).
		Этот подход основан на итеративном вычислении частичных решений более крупных задач, используя ранее найденные решения.

		В данном случае, мы итерируем по массиву nums, поддерживая текущие максимальное и минимальное произведения подмассивов,
		которые заканчиваются на текущем элементе. Это позволяет нам построить решение для всего массива,
		используя информацию о подмассивах любой длины.

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве nums

		SPACE COMPLEXITY: O(1), так как мы используем фиксированное количество переменных, не зависящих от размера входного массива
	*/
	// Проверка на пустой массив
	if len(nums) == 0 {
		return 0
	}

	// Инициализация переменных для отслеживания максимального и минимального произведения подмассивов
	maxSoFar := nums[0]
	minSoFar := nums[0]
	result := maxSoFar

	// Проход по каждому элементу массива
	for i := 1; i < len(nums); i++ {
		// Если текущий элемент меньше 0, меняем местами maxSoFar и minSoFar
		if nums[i] < 0 {
			maxSoFar, minSoFar = minSoFar, maxSoFar
		}

		// Обновление maxSoFar и minSoFar, используя текущий элемент и произведение предыдущих максимальных и минимальных значений
		maxSoFar = max(nums[i], maxSoFar*nums[i])
		minSoFar = min(nums[i], minSoFar*nums[i])

		// Обновление результата, используя максимум между текущим результатом и maxSoFar
		result = max(result, maxSoFar)
	}

	// Возвращаем максимальное произведение подмассива
	return result
}

// Функция для нахождения максимума из двух чисел
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

// Функция для нахождения минимума из двух чисел
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	nums := []int{2, 3, -2, 4}
	fmt.Println(maxProduct(nums)) // Вывод: 6
}

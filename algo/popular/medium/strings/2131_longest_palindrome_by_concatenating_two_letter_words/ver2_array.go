package main

func longestPalindromeV2(words []string) int {
	/*
		METHOD: 2D array
		Time complexity: O(n), это связано с тем, что мы проходимся по всем словам в массиве words только один раз.
		Space complexity: O(1), так как в худшем случае (когда все слова уникальны) мы будем хранить все слова в массиве words.

		В данном коде используется метод "двумерный массив" для подсчета количества вхождений каждого слова.
		Двумерный массив arr используется для хранения количества вхождений каждого слова.

		Для каждого слова в массиве words, мы вычисляем индексы i и j, которые используются для индексирования в двумерном массиве arr.
		Если слово уже встречалось в массиве arr, то мы добавляем 4 к length (так как палиндром состоит из 4 символов)
		и уменьшаем количество вхождений этого слова в массиве arr.
		Если слово еще не встречалось, то мы добавляем его в массив arr.

		После того, как мы посчитали количество вхождений всех слов, мы проходимся по всем элементам массива arr и ищем элемент на диагонали.
		Если такой элемент есть, то мы добавляем 2 к length (так как палиндром может состоять из 2 символов) и выходим из цикла.
	*/

	// Создаем двумерный массив arr для подсчета количества вхождений каждого слова.
	arr := [26][26]int{} // Нам известно, что все слова состоят из 2-х символов.
	// Переменная length для хранения длины самого длинного палиндрома.
	var length int

	// Проходимся по всем словам в массиве words.
	for _, w := range words {
		// Вычисляем индексы i и j для текущего слова.
		i, j := w[0]-'a', w[1]-'a'

		// Если слово уже встречалось в массиве, то добавляем 4 к length и уменьшаем количество вхождений этого слова в массиве.
		if arr[j][i] > 0 {
			length += 4
			arr[j][i]--
		} else {
			// Если слово еще не встречалось, то добавляем его в массив.
			arr[i][j]++
		}
	}

	// Проходимся по всем элементам массива arr.
	for i := 0; i < 26; i++ {
		// Если на диагонали массива arr есть элемент, то добавляем 2 к length и выходим из цикла.
		if arr[i][i] > 0 {
			length += 2
			break
		}
	}

	// Возвращаем длину самого длинного палиндрома.
	return length
}

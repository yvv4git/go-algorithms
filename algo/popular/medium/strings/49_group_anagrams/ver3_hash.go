package main

import (
	"sort"
	"strings"
)

// Функция groupAnagramsV3 группирует анаграммы вместе.
// Она принимает на вход массив строк и возвращает массив массивов строк,
// где каждый вложенный массив содержит группу анаграмм.
func groupAnagramsV3(strs []string) [][]string {
	/*
		Method:
		Time complexity: O(n * m log m), где n - количество слов в strs, а m - средняя длина слова.
		Space complexity: O(n * m), так как в худшем случае мы можем хранить каждое слово и его отсортированный анаграммный ключ.
	*/
	// Создаем пустой срез для результатов.
	res := make([][]string, 0)
	// Создаем карту, где ключ - это отсортированные символы слова, а значение - это срез слов.
	mp := make(map[string][]string)

	// Проходим по каждому слову в массиве strs.
	for _, v := range strs {
		// Разбиваем слово на символы.
		spl := strings.Split(v, "")
		// Сортируем символы.
		sort.Strings(spl)
		// Объединяем отсортированные символы обратно в строку.
		j := strings.Join(spl, "")
		// Инициализируем карту для ключа j.
		mp[j] = make([]string, 0) // Используется hashKey
	}

	// Проходим по каждому слову в массиве strs еще раз.
	for _, v := range strs {
		// Разбиваем слово на символы.
		spl := strings.Split(v, "")
		// Сортируем символы.
		sort.Strings(spl)
		// Объединяем отсортированные символы обратно в строку.
		j := strings.Join(spl, "")
		// Добавляем слово в группу, соответствующую ключу j.
		mp[j] = append(mp[j], v)
	}

	// Проходим по каждому значению в карте и добавляем его в результирующий срез.
	for _, v := range mp {
		res = append(res, v)
	}

	// Возвращаем результирующий срез.
	return res
}

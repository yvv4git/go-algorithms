package main

// Key - это структура, которая представляет собой частоту вхождения каждой буквы в слове.
type Key [26]int

// Функция groupAnagramsV2 группирует анаграммы вместе.
// Она принимает на вход массив строк и возвращает массив массивов строк,
// где каждый вложенный массив содержит группу анаграмм.
func groupAnagramsV2(strs []string) [][]string {
	/*
		METHOD: Group by Hash / Hash
		Time complexity: O(n * m), где n - количество слов в strs, а m - средняя длина слова.
		Space complexity: O(m), где m - длина слова.
	*/
	// Создаем карту, где ключ - это хеш-ключ, а значение - это слайс строк.
	// Ключ - это структура, которая представляет собой частоту вхождения каждой буквы в слове.
	groups := make(map[Key][]string)

	// Проходим по каждому слову в массиве strs.
	for _, v := range strs {
		// Получаем хеш-ключ для слова.
		key := getHashKey(v)
		// Добавляем слово в группу, соответствующую хеш-ключу.
		groups[key] = append(groups[key], v)
	}

	// Создаем результирующий массив.
	result := make([][]string, 0, len(groups))
	// Проходим по каждой группе в карте и добавляем ее в результирующий массив.
	for _, v := range groups {
		result = append(result, v)
	}

	// Возвращаем результирующий массив.
	return result
}

// Функция getHashKey вычисляет хеш-ключ для строки.
// Хеш-ключ - это структура, которая представляет собой частоту вхождения каждой буквы в слове.
func getHashKey(str string) (key Key) {
	// Проходим по каждому символу в строке.
	for i := range str {
		// Увеличиваем значение в структуре key на единицу для символа.
		key[str[i]-'a']++
	}
	// Возвращаем вычисленный хеш-ключ.
	return
}

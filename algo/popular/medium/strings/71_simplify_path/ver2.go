package main

import (
	"strings"
)

// Функция simplifyPathV2 принимает строку path, представляющую путь в файловой системе,
// и возвращает упрощенный путь.
func simplifyPathV2(path string) string {
	/*
		METHOD: Switch
		TIME COMPLEXITY: O(n), где n - количество элементов в пути. Это означает, что временная сложность составляет O(n).
		SPACE COMPLEXITY: O(n), где n - количество элементов в пути.

		Time complexity
		Временная сложность функции simplifyPathV2 определяется количеством итераций цикла, который проходит по всем элементам в массиве s.
		В худшем случае, если путь состоит только из ".", "..", или пустых строк, цикл будет выполняться n раз,
		где n - количество элементов в пути. Это означает, что временная сложность составляет O(n).

		Space complexity
		Пространственная сложность также зависит от количества элементов в пути. В худшем случае,
		когда путь состоит только из ".", "..", или пустых строк, мы можем получить новый массив размером, равным исходному,
		если каждая часть пути является ".", "..", или пустой строкой.
		Это означает, что пространственная сложность составляет O(n), где n - количество элементов в пути.
	*/
	// Разделяем путь на части по символу "/" и сохраняем их в массив s.
	s := strings.Split(path, "/")
	i := 0
	j := len(s)

	// Проходим по всем частям пути.
	for i < j {
		// Проверяем текущую часть пути.
		switch s[i] {
		case ".", " ", "":
			// Если часть пути равна ".", " " или "", удаляем ее из массива.
			s = append(s[:i], s[i+1:]...)
			j-- // Уменьшаем длину массива, так как мы удалили элемент.
		case "..":
			// Если часть пути равна "..", переходим на уровень вверх.
			if i > 0 {
				// Если мы не в корневой директории, удаляем текущую и предыдущую части пути.
				s = append(s[:i-1], s[i+1:]...)
				j-- // Уменьшаем длину массива, так как мы удалили элемент.
				i-- // Уменьшаем индекс, так как мы переместились на уровень вверх.
			} else {
				// Если мы в корневой директории, удаляем только "..".
				s = append(s[:i], s[i+1:]...)
				j-- // Уменьшаем длину массива, так как мы удалили элемент.
			}
		default:
			// Если часть пути не равна ".", " " или "", переходим к следующей части пути.
			i++
		}
	}

	// Объединяем все части пути обратно в строку, разделяя их символом "/".
	// Если путь был пустым или состоял только из ".", " " или "", возвращаем "/".
	if len(s) == 0 {
		return "/"
	}
	return "/" + strings.Join(s, "/")
}

package main

import (
	"fmt"
	"strconv"
)

// Функция convertToBase7 принимает целое число и возвращает его представление в семиричной системе счисления.
func convertToBase7(num int) string {
	/*
		METHOD: Math & Iterative & Lib

		TIME COMPLEXITY: O(log n), где n - входное число.
		Это связано с тем, что в наихудшем случае алгоритм будет выполняться столько раз, сколько разрядов в числе в семиричной системе счисления.

		SPACE COMPLEXITY: O(log n), так как в худшем случае мы будем хранить столько разрядов, сколько их в числе в семиричной системе счисления.
		Это происходит в строке result, которая в худшем случае может содержать столько символов, сколько разрядов в числе.
	*/

	// Если число равно 0, то сразу возвращаем "0"
	if num == 0 {
		return "0"
	}

	// Флаг, указывающий на то, является ли число отрицательным
	isNegative := false

	// Если число отрицательное, меняем флаг и делаем число положительным
	if num < 0 {
		isNegative = true
		num = -num
	}

	// Переменная для хранения результата
	result := ""

	// Пока число больше 0, выполняем цикл
	for num > 0 {
		// Берем остаток от деления на 7 и добавляем его в начало строки result
		result = strconv.Itoa(num%7) + result
		// Делим число на 7
		num /= 7
	}

	// Если число было отрицательным, добавляем "-" в начало результата
	if isNegative {
		result = "-" + result
	}

	// Возвращаем результат
	return result
}

func main() {
	// Пример использования функции convertToBase7
	num := 100
	fmt.Println(convertToBase7(num)) // Вывод: "202"
}

package main

import (
	"sort"
)

// Функция для поиска элемента, встречающегося один раз
func singleNumberV2(nums []int) int {
	/*
		METHOD: Sort
		В этом коде мы сначала сортируем массив nums, используя встроенную функцию sort.Ints().
		Затем мы проходимся по отсортированному массиву, сравнивая каждый элемент с предыдущим и следующим.
		Если элемент не совпадает с предыдущим и следующим, то мы возвращаем его, так как он является единственным.
		Если мы не нашли единственный элемент, мы возвращаем -1 или другое значение, указывающее на ошибку.

		TIME COMPLEXITY: O(n log n) из-за сортировки, где n - количество элементов в массиве.

		SPACE COMPLEXITY: O(1) или O(n) в зависимости от того, требует ли задача изменения исходного массива.
		Если не требуется, то можно использовать O(1) дополнительной памяти, копируя исходный массив.
	*/
	// Сортируем массив
	sort.Ints(nums)

	// Проходим по массиву
	for i := 0; i < len(nums); i += 3 {
		// Если текущий элемент не совпадает с предыдущим и следующим,
		// то он встречается один раз
		if i == len(nums)-1 || nums[i] != nums[i+1] {
			return nums[i]
		}
	}

	// Если единственный элемент не найден, возвращаем -1 или любое другое значение,
	// указывающее на ошибку, в зависимости от требований к задаче
	return -1
}

//func main() {
//	// Пример использования функции
//	nums := []int{2, 2, 3, 2}
//	fmt.Println(singleNumberV2(nums)) // Вывод: 3
//}

package main

import (
	"fmt"
	"sort"
)

// Функция для вычисления H-индекса
func hIndex(citations []int) int {
	/*
		METHOD: Sort
		1. Сначала сортируем массив цитирований в порядке убывания.
		2. Затем проходимся по отсортированному массиву и ищем первый элемент,
		для которого цитирование меньше или равно его индексу плюс единица.
		3. Если такой элемент найден, то его индекс является H-индексом.
		4. Если мы прошли весь массив и не нашли подходящего индекса, то H-индекс равен длине массива,
		так как каждый элемент массива не может быть меньше длины массива.

		Индекс цитирования (h-index) - это мера, используемая в научной литературе для оценки репутации ученых.
		Он представляет собой максимальное число цитирований, на которое ученый может быть отнесен.
		Например, если ученый имеет 10 публикаций, и каждая из них имеет не менее 10 цитирований, то его h-индекс равен 10.
		Если же ученый имеет 10 публикаций, но первая из них имеет 10 цитирований, а остальные - менее,
		то его h-индекс равен 1, потому что он имеет одну публикацию, которая цитируется 10 раз.

		TIME COMPLEXITY: O(n log n) из-за сортировки массива

		SPACE COMPLEXITY: O(1)
	*/
	// Сортируем массив цитирований в порядке убывания
	sort.Sort(sort.Reverse(sort.IntSlice(citations)))

	// Проходимся по отсортированному массиву
	for i, citation := range citations {
		// Если цитирование меньше или равно индексу плюс единица,
		// то возвращаем этот индекс как H-индекс
		if citation < i+1 {
			return i
		}
	}

	// Если мы прошли весь массив и не нашли подходящего индекса,
	// то возвращаем длину массива, так как H-индекс не может быть больше количества цитирований
	return len(citations)
}

func main() {
	citations := []int{3, 0, 6, 1, 5}
	fmt.Println(hIndex(citations)) // Выведет: 3
}

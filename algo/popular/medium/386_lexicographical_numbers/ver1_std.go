package main

import (
	"sort"
	"strconv"
)

// Функция для генерации чисел в лексикографическом порядке
func lexicographicalNumbers(n int) []int {
	/*
		METHOD: STD
		- Создаем слайс чисел от 1 до n.
		- Преобразуем каждое число в строку.
		- Сортируем числа лексикографически на основе их строкового представления.
		- Возвращаем отсортированный слайс.
		Мы используем стандартную библиотеку Go для сортировки слайса чисел.
		Преобразование чисел в строки позволяет нам легко применить лексикографическое сравнение,
		что является ключевым моментом в решении этой задачи. Этот подход прост и эффективен для небольших и средних значений n.

		TIME COMPLEXITY:
		- Создание слайса: O(n)
		- Сортировка: O(n log n) (в худшем случае)
		- Общая временная сложность: O(n log n)

		SPACE COMPLEXITY:
		- Слайс чисел: O(n)
		- Дополнительная память для сортировки: O(log n) (для стека вызовов при рекурсивной сортировке)
		- Общая пространственная сложность: O(n)
	*/
	// Создаем слайс для хранения чисел
	numbers := make([]int, n)
	for i := 1; i <= n; i++ {
		numbers[i-1] = i
	}

	// Преобразуем числа в строки и сортируем их лексикографически
	sort.Slice(numbers, func(i, j int) bool {
		return strconv.Itoa(numbers[i]) < strconv.Itoa(numbers[j])
	})

	return numbers
}

//func main() {
//	// Пример использования
//	n := 13
//	result := lexicographicalNumbers(n)
//	fmt.Println(result)
//}

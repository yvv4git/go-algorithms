package main

// Функция для генерации чисел в лексикографическом порядке с использованием DFS
func lexicographicalNumbersV2(n int) []int {
	/*
		METHOD: DFS
		- Используем Depth-First Search (DFS) для генерации чисел в лексикографическом порядке.
		- Начинаем с числа 1 и рекурсивно генерируем числа, увеличивая последнюю цифру на 1, пока не достигнем n.
		- После этого переходим к следующему числу, начинающемуся с 2, и так далее.
		Этот подход использует DFS для последовательного исследования чисел в лексикографическом порядке.
		Умножение на 10 позволяет нам исследовать числа с дополнительными разрядами,
		а увеличение последней цифры на 1 позволяет нам переходить к следующим числам в лексикографическом порядке.
		Этот метод эффективно генерирует числа без необходимости преобразования их в строки и сортировки.

		Лексикографический порядок — это порядок, в котором слова или числа упорядочиваются так, как они расположены в словаре.
		Для чисел это означает, что они упорядочиваются по их строковому представлению, а не по их числовому значению.
		Например, числа от 1 до 10 в лексикографическом порядке будут выглядеть так:
		1, 10, 2, 3, 4, 5, 6, 7, 8, 9

		TIME COMPLEXITY:
		- В худшем случае мы посетим каждое число от 1 до n ровно один раз.
		- Общая временная сложность: O(n)

		SPACE COMPLEXITY:
		- Используем стек вызовов для рекурсии, который может достигать глубины log10(n) в худшем случае.
		- Общая пространственная сложность: O(log10(n))
	*/
	var result []int
	dfs(1, n, &result)
	return result
}

// Рекурсивная функция DFS для генерации чисел
func dfs(current, n int, result *[]int) {
	if current > n {
		return
	}
	*result = append(*result, current)
	dfs(current*10, n, result) // Рекурсивно генерируем числа, умножая текущее число на 10
	if current%10 != 9 {
		dfs(current+1, n, result) // Рекурсивно генерируем следующее число, увеличивая последнюю цифру на 1
	}
}

func main() {
	// Пример использования
	var result []int
	dfs(1, 10, &result)
}

package main

func kthSmallest(matrix [][]int, k int) int {
	/*
		METHOD: Binary Search
		DESCRIPTION: Используется двоичный поиск по значениям матрицы для нахождения k-го наименьшего элемента.

		TIME COMPLEXITY: O(n log(max-min))
		DESCRIPTION: Временная сложность определяется двоичным поиском, где n — размер матрицы,
		max и min — максимальный и минимальный элементы матрицы соответственно.
		Каждая итерация двоичного поиска требует O(n) времени для подсчета элементов,
		а общее количество итераций двоичного поиска составляет O(log(max-min)).

		SPACE COMPLEXITY: O(1)
		DESCRIPTION: Используется только константное количество дополнительной памяти,
		поэтому пространственная сложность равна O(1).
	*/
	// Определяем размер матрицы
	n := len(matrix)

	// Инициализируем границы поиска: left - минимальный элемент, right - максимальный элемент
	left, right := matrix[0][0], matrix[n-1][n-1]

	// Начинаем двоичный поиск
	for left < right {
		// Вычисляем среднее значение между left и right
		mid := (left + right) / 2

		// Инициализируем счетчик для количества элементов, меньших или равных mid
		count := 0

		// Указатель для оптимизации подсчета элементов в столбцах
		j := n - 1

		// Подсчитываем количество элементов, меньших или равных mid
		for i := 0; i < n; i++ {
			// Двигаем указатель j влево, пока не найдем элементы, меньшие или равные mid
			for j >= 0 && matrix[i][j] > mid {
				j--
			}
			// Добавляем количество элементов, меньших или равных mid в текущей строке
			count += (j + 1)
		}

		// Если количество элементов меньше k, сдвигаем left вправо
		if count < k {
			left = mid + 1
		} else {
			// В противном случае сдвигаем right влево
			right = mid
		}
	}

	// Возвращаем k-й наименьший элемент
	return left
}

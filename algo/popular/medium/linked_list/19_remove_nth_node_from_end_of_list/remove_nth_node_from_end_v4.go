package main

// Функция для удаления n-го узла с конца списка
func removeNthFromEndV4(head *ListNode, n int) *ListNode {
	/*
		METHOD: Two pointer and dummy
		Time complexity: O(n)
		Space complexity:	O(1)

		Time Complexity: O(n)
		Временная сложность этого алгоритма составляет O(n), где n - количество узлов в списке.
		Это связано с тем, что алгоритм проходит по списку два раза: один раз для создания "отступа" между указателями,
		а второй раз для удаления узла. Каждый проход по списку занимает O(n) времени, поэтому общий временный объем алгоритма составляет O(n).

		Space Complexity: O(1)
		Пространственная сложность этого алгоритма составляет O(1), так как алгоритм использует фиксированное количество пространства,
		независимо от размера входных данных. Это связано с тем, что алгоритм использует только несколько указателей,
		которые не зависят от размера входных данных.
	*/
	// Создаем фиктивный узел, который указывает на начало списка
	dummy := &ListNode{0, head}

	// Инициализируем два указателя на фиктивный узел
	first := dummy
	second := dummy

	// Перемещаем первый указатель на расстояние n от начала списка
	for i := 1; i <= n+1; i++ {
		first = first.Next
	}

	// Перемещаем оба указателя одновременно, пока первый указатель не достигнет конца списка
	for first != nil {
		first = first.Next
		second = second.Next
	}

	// Удаляем n-й узел
	second.Next = second.Next.Next

	// Возвращаем голову списка
	return dummy.Next
}

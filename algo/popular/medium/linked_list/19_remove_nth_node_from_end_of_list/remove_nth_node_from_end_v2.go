package main

func removeNthFromEndV2(head *ListNode, n int) *ListNode {
	/*
		METHOD: Dummy node
		Time complexity: O(N)
		Space complexity: O(1)

		В этом коде мы создаем фиктивный узел dummy, который указывает на начало списка head.
		Затем мы используем два указателя first и second, чтобы найти узел, который нужно удалить.
		Указатель first продвигается на n шагов вперед, а указатель second начинает с dummy и продвигается вместе с first.
		Когда first достигает конца списка, second находится на узле перед узлом, который нужно удалить.
		Затем мы изменяем указатель Next второго узла, чтобы он пропускал узел, который находится на n-м месте с конца списка.

		В этом алгоритме также используется метод "двух указателей" или "два прохода".
		Этот метод используется для решения задач, когда нужно найти элемент в связном списке, который находится на определенной позиции от конца списка.

		В данном алгоритме два указателя first и second используются для создания "отступа" между ними, равного n узлам.
		Начальное положение указателя first - это голова списка, а указатель second - фиктивный узел dummy.

		1. Первый указатель first перемещается на n узлов вперед.
		Это делается для того, чтобы создать "отступ" между first и second, равный n узлам.

		2. Затем оба указателя перемещаются одновременно до тех пор, пока первый указатель не достигнет конца списка.
		Это гарантирует, что когда первый указатель достигнет конца списка, второй указатель будет на n узлах от конца списка.

		3. После того, как оба указателя достигнут нужной позиции, второй указатель используется для удаления узла, следующего за ним.

		Наконец, возвращается голова списка.
		Таким образом, этот алгоритм позволяет удалить n-й узел с конца списка за один проход.
	*/

	dummy := &ListNode{0, head} // Создаем фиктивный узел, который указывает на начало списка
	first := head               // Указатель first указывает на начало списка
	second := dummy             // Указатель second указывает на фиктивный узел

	// Перемещаем первый указатель на n узлов вперед
	for i := 0; i < n; i++ {
		first = first.Next
	}

	// Перемещаем оба указателя до тех пор, пока первый указатель не достигнет конца списка
	for first != nil {
		first = first.Next
		second = second.Next
	}

	// Удаляем узел, следующий за вторым указателем
	second.Next = second.Next.Next

	// Возвращаем голову списка
	return dummy.Next
}

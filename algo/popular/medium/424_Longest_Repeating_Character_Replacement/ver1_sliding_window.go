package main

import (
	"fmt"
)

// characterReplacement возвращает длину самого длинного подстрокового окна,
// содержащего одинаковые символы после не более k замен.
func characterReplacement(s string, k int) int {
	/*
	   APPROACH: Sliding Window
	   1. Используем скользящее окно с двумя указателями (left и right) для перебора подстрок.
	   2. Подсчитываем частоту символов в текущем окне с помощью массива (для букв A-Z).
	   3. Следим за максимальной частотой символа в окне (maxCount).
	   4. Количество замен = длина окна - maxCount. Если замен больше k, сужаем окно.
	   5. На каждом шаге обновляем максимальную длину окна (maxLength).

	   TIME COMPLEXITY: O(n)
	   - Проходим по строке один раз с помощью указателя right, где n — длина строки s.
	   - Операции с массивом charCount (инкремент, декремент) выполняются за O(1).
	   - Итоговая сложность O(n).

	   SPACE COMPLEXITY: O(1)
	   - Используем массив charCount фиксированного размера 26 (для букв A-Z).
	   - Остальные переменные (left, maxLength, maxCount) занимают O(1) памяти.
	   - Итоговая сложность O(1), так как размер массива не зависит от входных данных.
	*/
	// Создаем массив для подсчета частоты символов (для букв A-Z)
	charCount := make([]int, 26)

	// Инициализируем указатели окна и максимальную длину
	left := 0
	maxLength := 0
	maxCount := 0 // Максимальная частота одного символа в текущем окне

	// Проходим по строке правым указателем
	for right := 0; right < len(s); right++ {
		// Увеличиваем счетчик текущего символа (s[right] - 'A' для индексации)
		charCount[s[right]-'A']++
		// Обновляем максимальную частоту символа в текущем окне
		if charCount[s[right]-'A'] > maxCount {
			maxCount = charCount[s[right]-'A']
		}

		// Текущее окно: [left, right]
		// Количество замен = длина окна - максимальная частота символа
		// Если замен больше k, сужаем окно
		if (right-left+1)-maxCount > k {
			charCount[s[left]-'A']--
			left++
		}

		// Обновляем максимальную длину окна
		if right-left+1 > maxLength {
			maxLength = right - left + 1
		}
	}

	return maxLength
}

func main() {
	// Примеры для тестирования
	testCases := []struct {
		s        string
		k        int
		expected int
	}{
		{"ABAB", 2, 4},    // Можно заменить до 2 символов, результат: "AAAA" или "BBBB" длиной 4
		{"AABABBA", 1, 4}, // Можно заменить 1 символ, результат: "AABA" длиной 4
		{"AAAA", 0, 4},    // Без замен, результат: "AAAA" длиной 4
		{"ABBB", 2, 4},    // Можно заменить до 2 символов, результат: "BBBB" длиной 4
	}

	// Запускаем тесты
	for i, tc := range testCases {
		result := characterReplacement(tc.s, tc.k)
		fmt.Printf("Тест %d: s=%s, k=%d, Ожидаемый результат=%d, Полученный результат=%d\n",
			i+1, tc.s, tc.k, tc.expected, result)
		if result != tc.expected {
			fmt.Println("Тест не пройден!")
		} else {
			fmt.Println("Тест пройден успешно!")
		}
	}
}

package main

func searchMatrixV2(matrix [][]int, target int) bool {
	/*
		METHOD: Двоичный поиск в двумерной матрице
		Описание метода:
		- Используется рекурсивный двоичный поиск для поиска целевого значения в двумерной матрице.
		- На каждом шаге область поиска сужается до квадратной подматрицы, где возможен целевой элемент.
		- Если целевой элемент не найден в текущей подматрице, поиск продолжается в оставшихся частях матрицы.

		TIME COMPLEXITY: O(min(n, m) * log(max(n, m)))
		Описание временной сложности:
		- На каждом шаге область поиска уменьшается вдвое, что дает логарифмическую сложность.
		- В худшем случае мы проходим через min(n, m) строк или столбцов, что дает общую сложность O(min(n, m) * log(max(n, m))).

		SPACE COMPLEXITY: O(log(max(n, m)))
		Описание пространственной сложности:
		- Используется рекурсивный вызов функции, что приводит к стековому пространству, пропорциональному глубине рекурсии.
		- Глубина рекурсии зависит от размера матрицы и составляет O(log(max(n, m))).
	*/

	// Получаем размеры матрицы
	n, m := len(matrix), len(matrix[0])

	// Вспомогательная функция для нахождения минимума двух чисел
	min := func(i1 int, i2 int) int {
		if i1 < i2 {
			return i1
		}
		return i2
	}

	// Рекурсивная функция для двоичного поиска в подматрице
	var binarysearch func(x1 int, x2 int, y1 int, y2 int) bool
	binarysearch = func(x1 int, x2 int, y1 int, y2 int) bool {
		// Проверяем, что текущая подматрица не пуста
		if x1 > x2 || y1 > y2 {
			return false
		}
		// Находим размер квадратной подматрицы
		delta := min(x2-x1, y2-y1)
		lo1, lo2, hi1, hi2 := x1, y1, x1+delta, y1+delta

		// Двоичный поиск в квадратной подматрице
		for lo1 <= hi1 && lo2 <= hi2 {
			m1 := lo1 + (hi1-lo1)/2
			m2 := lo2 + (hi2-lo2)/2
			v := matrix[m1][m2]
			if v == target {
				return true
			} else if matrix[m1][m2] > target {
				hi1 = m1 - 1
				hi2 = m2 - 1
			} else {
				lo1 = m1 + 1
				lo2 = m2 + 1
			}
		}
		// Рекурсивный поиск в оставшихся частях матрицы
		return binarysearch(lo1, x2, y1, hi2) || binarysearch(x1, hi1, lo2, y2)
	}

	// Запускаем двоичный поиск с начальными границами матрицы
	return binarysearch(0, n-1, 0, m-1)
}

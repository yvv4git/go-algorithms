package main

import "fmt"

func getSum(a int, b int) int {
	/*
		METHOD: Bitwise

		TIME COMPLEXITY: O(1), так как в худшем случае мы будем выполнять не более 32 итераций,
		поскольку в Go целочисленные значения состоят из 32 бит. Это связано с тем,
		что мы будем выполнять побитовые операции до тех пор, пока не закончится перенос (когда b станет равным 0).

		SPACE COMPLEXITY: O(1), так как мы используем фиксированное количество переменных,
		не зависящих от размера входных данных.
	*/
	for b != 0 {
		// Вычисляем сумму без учета переноса
		sum := a ^ b
		// Вычисляем только перенос, не учитывая сумму
		carry := a & b
		// Сдвигаем перенос влево на 1 бит, чтобы учесть его в следующей итерации
		carry <<= 1
		// Обновляем значения a и b для следующей итерации
		a = sum
		b = carry
	}
	return a
}

func main() {
	fmt.Println(getSum(1, 2)) // Выведет: 3
}

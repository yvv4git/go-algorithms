package main

import "math"

// Функция countPrimesV3 принимает целое число n и возвращает количество простых чисел, которые меньше n.
func countPrimesV3(n int) int {
	/*
				METHOD: Math / решето Эратосфена / the sieve of Eratosthenes

				TIME COMPLEXITY: O(n log log n), где n - входное число. Это результат использования решета Эратосфена, который имеет сложность O(n log log n).
		`
				SPACE COMPLEXITY: O(n), так как мы используем дополнительный булевый массив размера n для хранения информации о простых числах.
	*/
	count := 0 // Инициализируем счетчик простых чисел.

	// Создаем булевый массив длиной n, который будет использоваться для отметки чисел как простые или составные.
	// По умолчанию все числа считаются простыми.
	prime := make([]bool, n)

	// Если n меньше или равно 2, то простых чисел нет.
	if n <= 2 {
		return 0
	}

	// Проходим по всем числам от 2 до корня из n.
	for i := 2; i <= int(math.Sqrt(float64(n))); i++ {
		// Если текущее число ещё не отмечено как составное, то отмечаем все его кратные.
		if prime[i] == false {
			for j := i * i; j < n; j += i {
				prime[j] = true
			}
		}
	}

	// Подсчитываем количество простых чисел.
	for i := 2; i < n; i++ {
		if prime[i] == false {
			count++
		}
	}

	return count
}

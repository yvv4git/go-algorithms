package _43_integer_break

// Функция integerBreak принимает на вход целое число n и возвращает максимальное произведение, которое можно получить, разбив n на сумму k положительных целых чисел, где k >= 2.
func integerBreakV1(n int) int {
	/*
		METHOD: Dynamic programming
		TIME COMPLEXITY: O(n)
		SPACE COMPLEXITY: O(1)

		Это задача на динамическое программирование.

		TIME COMPLEXITY:
		Временная сложность этого алгоритма составляет O(n), так как в худшем случае мы проходимся по всем числам от 1 до n.

		SPACE COMPLEXITY:
		Пространственная сложность также составляет O(1), так как мы используем фиксированное количество переменных,
		не зависящих от размера входных данных.

		В этом коде мы используем динамическое программирование для решения задачи.
		Мы начинаем с разбиения n на сумму положительных целых чисел, где k >= 2.
		Если n равно 2 или 3, то максимальное произведение будет равно n-1.
		Если n больше 4, то мы будем умножать текущее произведение на 3 и уменьшать n на 3, пока n не станет меньше или равным 4.
		Затем мы будем умножать текущее произведение на оставшееся n.
		Максимальное произведение будет равно текущему произведению.
	*/
	// Если n равно 2 или 3, то максимальное произведение будет равно n-1.
	if n == 2 || n == 3 {
		return n - 1
	}

	// Инициализируем переменные для хранения максимального произведения и текущего произведения.
	maxProduct := 1
	curProduct := 1

	// Цикл, в котором мы будем разбивать n на сумму положительных целых чисел.
	for n > 4 {
		// Умножаем текущее произведение на 3.
		curProduct *= 3
		// Уменьшаем n на 3.
		n -= 3
	}

	// Умножаем текущее произведение на оставшееся n.
	curProduct *= n

	// Максимальное произведение равно текущему произведению.
	maxProduct = curProduct

	// Возвращаем максимальное произведение.
	return maxProduct
}

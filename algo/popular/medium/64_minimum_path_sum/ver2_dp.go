package main

func min(i, j int) int {
	if i > j {
		return j
	}

	return i
}

// Функция для нахождения минимальной суммы пути
func minPathSumV2(grid [][]int) int {
	// Получаем размеры матрицы
	n := len(grid)
	m := len(grid[0])

	// Проходим по каждой ячейке матрицы
	for i := 0; i < n; i++ {
		for j := 0; j < m; j++ {
			// Если мы находимся в первой строке, то минимальная сумма пути равна сумме текущей ячейки и ячейки слева
			if i == 0 {
				if j > 0 {
					grid[0][j] = grid[0][j-1] + grid[0][j]
				}
			} else if j == 0 {
				// Если мы находимся в первом столбце, то минимальная сумма пути равна сумме текущей ячейки и ячейки сверху
				if i > 0 {
					grid[i][0] = grid[i-1][0] + grid[i][0]
				}
			} else {
				// Для всех остальных ячеек минимальная сумма пути равна минимальному значению между суммой пути до соседней ячейки сверху
				// и суммой пути до соседней ячейки слева, плюс значение текущей ячейки
				grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]
			}
		}
	}

	// Возвращаем значение в нижнем правом углу матрицы, которое и будет минимальной суммой пути
	return grid[n-1][m-1]
}

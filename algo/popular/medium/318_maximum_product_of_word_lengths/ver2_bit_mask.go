package main

func maxProductV2(words []string) int {
	/*
		METHOD:
		Использование битовых масок позволяет эффективно проверять наличие общих букв между словами,
		что уменьшает временную сложность по сравнению с прямым сравнением каждой буквы в словах.
		Битовые маски представляют собой 32-битные целые числа, где каждый бит соответствует наличию определенной буквы в слове.
		Побитовое И между двумя битовыми масками позволяет быстро определить, есть ли у слов общие буквы.


		TIME COMPLEXITY: O(n^2 * L), где n — количество слов, а L — средняя длина слова.
		Это связано с тем, что мы перебираем все пары слов и для каждой пары проверяем наличие общих букв.

		SPACE COMPLEXITY: O(n), где n — количество слов.
		Это связано с тем, что мы храним массив битовых масок для каждого слова.
	*/
	// Инициализация переменной для хранения максимального произведения и массива битовых масок
	result, chars := 0, make([]uint32, len(words))

	// Заполнение массива битовых масок для каждого слова
	for i, word := range words {
		for j := 0; j < len(word); j++ {
			// Установка соответствующего бита в битовой маске для каждой буквы слова
			chars[i] |= 1 << (word[j] - 'a')
		}
	}

	// Перебор всех пар слов для поиска максимального произведения
	for i := 0; i < len(words); i++ {
		for j := i + 1; j < len(words); j++ {
			// Вычисление произведения длин слов
			if product := len(words[i]) * len(words[j]); chars[i]&chars[j] == 0 && product > result {
				// Обновление максимального произведения, если текущее больше
				result = product
			}
		}
	}

	return result
}

package main

import (
	"fmt"
	"math"
)

// Функция integerReplacement решает задачу "Integer Replacement"
func integerReplacement(n int) int {
	/*
		METHOD: Recursion with memoization
		Этот метод использует рекурсию с мемоизацией для эффективного решения задачи.
		Рекурсивная функция helper вызывается для каждого значения n, и результаты сохраняются в карте memo.
		Если значение для n уже вычислено, оно возвращается из memo, что предотвращает повторные вычисления.

		TIME COMPLEXITY:
		Временная сложность этого метода составляет O(log n). Это связано с тем, что каждое значение n обрабатывается
		только один раз, и при каждом вызове функции n либо делится на 2 (для четных чисел), либо заменяется на
		n + 1 или n - 1 (для нечетных чисел). В худшем случае, когда n постоянно увеличивается или уменьшается на 1,
		количество вызовов будет пропорционально логарифму от n.

		SPACE COMPLEXITY:
		Пространственная сложность этого метода составляет O(log n). Это связано с тем, что в худшем случае
		глубина рекурсии будет пропорциональна логарифму от n, и каждый вызов функции будет сохранять результат
		в карте memo. Таким образом, размер карты memo будет также пропорционален логарифму от n.
	*/
	// Создаем карту memo для хранения уже вычисленных результатов
	memo := make(map[int]int)
	return helper(n, memo)
}

// Вспомогательная функция helper выполняет рекурсивные вычисления
func helper(n int, memo map[int]int) int {
	// Если результат для данного n уже вычислен, возвращаем его
	if val, found := memo[n]; found {
		return val
	}

	// Базовый случай: если n равно 1, возвращаем 0
	if n == 1 {
		return 0
	}

	// Переменная для хранения результата
	var result int

	// Если n четное, вызываем helper для n / 2
	if n%2 == 0 {
		result = 1 + helper(n/2, memo)
	} else {
		// Если n нечетное, вызываем helper для n + 1 и n - 1, выбираем минимальное значение
		result = 1 + int(math.Min(float64(helper(n+1, memo)), float64(helper(n-1, memo))))
	}

	// Сохраняем результат в карте memo
	memo[n] = result

	return result
}

func main() {
	// Пример использования функции integerReplacement
	n := 8
	fmt.Printf("Минимальное количество операций для преобразования %d в 1: %d\n", n, integerReplacement(n))
}

package main

import "fmt"

func canCompleteCircuit(gas []int, cost []int) int {
	/*
		METHOD: Iterative
		Для решения этой задачи мы можем использовать алгоритм, основанный на идее "горки и нули".
		Мы начнем с точки, где сумма gas[i] - cost[i] максимальна, так как это может быть стартовая точка.
		Затем мы будем двигаться по массиву и проверять, можем ли мы добраться до следующей точки с текущего запаса бензина.
		Если не можем, то мы перемещаем стартовую точку на следующую и продолжаем поиск.

		TIME COMPLEXITY: O(n), где n - количество станций, так как мы проходим по массиву только один раз.

		SPACE COMPLEXITY: O(1), так как мы используем только несколько переменных для отслеживания состояния.
	*/
	// Проверяем, есть ли решение вообще
	var totalGas, totalCost int
	for i := 0; i < len(gas); i++ {
		totalGas += gas[i]
		totalCost += cost[i]
	}

	// Если суммарный объем бензина, который автомобиль может получить (totalGas),
	// меньше суммарной стоимости бензина (totalCost), которую он должен потратить на преодоление каждой станции,
	// то автомобиль не сможет завершить оборот без бензина.
	if totalGas < totalCost {
		return -1
	}

	// Находим стартовую точку
	var start, tank int
	for i := 0; i < len(gas); i++ {
		tank += gas[i] - cost[i]
		if tank < 0 {
			start = i + 1
			tank = 0
		}
	}

	return start
}

func main() {
	gas := []int{1, 2, 3, 4, 5}
	cost := []int{3, 4, 5, 1, 2}
	fmt.Println(canCompleteCircuit(gas, cost)) // Вывод: 3
}

package _53_find_minimum_in_rotated_sorted_array

func findMinV1(nums []int) int {
	/*
		METHOD: Binary search
		TIME COMPLEXITY: O(log n), так как мы делим массив на половины в каждой итерации.
		SPACE COMPLEXITY: O(1), так как мы используем некоторые переменные для хранения индексов, но не используем дополнительное пространство, зависящее от размера входных данных.
	*/

	// Инициализируем две переменные, которые будут указывать на начало и конец массива
	start, end := 0, len(nums)-1

	// Пока начало меньше конец
	for start < end {
		// Находим середину
		mid := start + (end-start)/2

		// Если середина больше конечной точка, то минимальный элемент находится в правой половине
		if nums[mid] > nums[end] {
			start = mid + 1
		} else {
			// Иначе минимальный элемент находится в левой половине
			end = mid
		}
	}

	// В конце цикла start и end будут указывать на один и тот же элемент, который является минимальным
	return nums[start]
}

package main

import "fmt"

// Функция для поиска всех повторяющихся последовательностей ДНК длиной 10 символов в строке ДНК.
// Используется подход "Слайдинг-окно" и хеш-таблица для отслеживания повторяющихся последовательностей.
func findRepeatedDnaSequences(s string) []string {
	/*
		METHOD: Sliding window
		Слайдинг-окно - это подход, когда мы используем фиксированный размер окна (в нашем случае длиной 10 символов) для прохода по строке.
		Мы двигаем это окно по строке и выполняем необходимые операции для каждого фрагмента строки.
		В данном случае, мы используем хеш-таблицу для отслеживания количества вхождений каждой последовательности ДНК.

		TIME COMPLEXITY: O(N), где N - длина строки ДНК. Мы проходим по строке один раз, поэтому временная сложность линейная.

		SPACE COMPLEXITY: O(N), где N - количество уникальных последовательностей ДНК в строке. В худшем случае мы можем хранить все уникальные последовательности в хеш-таблице, что приводит к линейной пространственной сложности.
	*/
	// Создаем хеш-таблицу для отслеживания количества вхождений каждой последовательности ДНК.
	sequenceMap := make(map[string]int)
	// Создаем слайс для хранения результатов.
	result := make([]string, 0)

	// Проходим по строке ДНК с помощью слайдинг-окна длины 10 символов.
	for i := 0; i <= len(s)-10; i++ {
		// Извлекаем текущую последовательность ДНК.
		sequence := s[i : i+10]
		// Увеличиваем счетчик вхождений для текущей последовательности.
		sequenceMap[sequence]++
		// Если последовательность встретилась впервые, то добавляем ее в результат.
		if sequenceMap[sequence] == 2 {
			result = append(result, sequence)
		}
	}

	return result
}

func main() {
	// Пример строки ДНК.
	s := "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
	// Поиск повторяющихся последовательностей ДНК.
	repeatedSequences := findRepeatedDnaSequences(s)
	// Вывод результата.
	fmt.Println(repeatedSequences)
}

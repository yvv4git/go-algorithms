package main

import (
	"fmt"
	"math"
)

func minimumTotal(triangle [][]int) int {
	/*
		METHOD: Dynamic programming
		Для решения этой задачи мы можем использовать динамическое программирование.
		Мы будем использовать массив dp, где dp[i][j] будет содержать минимальную сумму пути от верхней грани до ячейки (i, j).

		TIME COMPLEXITY: O(n^2), где n - количество рядов в треугольнике,
		потому что мы проходим по каждому элементу треугольника ровно один раз.

		SPACE COMPLEXITY: O(n^2), потому что мы создаем массив dp размером n x n.
	*/
	n := len(triangle)
	dp := make([][]int, n)
	for i := range dp {
		dp[i] = make([]int, n)
	}

	// Инициализируем крайний правый столбец значениями из треугольника
	for i := 0; i < n; i++ {
		dp[n-1][i] = triangle[n-1][i]
	}

	// Заполняем оставшиеся ячейки массива dp
	for i := n - 2; i >= 0; i-- {
		for j := 0; j <= i; j++ {
			// Выбираем минимальную сумму пути из двух возможных вариантов:
			// 1. Продолжить движение вниз
			// 2. Сделать поворот направо-вниз
			dp[i][j] = triangle[i][j] + int(math.Min(float64(dp[i+1][j]), float64(dp[i+1][j+1])))
		}
	}

	// Результат - значение в ячейке dp[0][0], так как мы двигаемся от верхней грани до основания
	return dp[0][0]
}

func main() {
	triangle := [][]int{
		{2},
		{3, 4},
		{6, 5, 7},
		{4, 1, 8, 3},
	}
	fmt.Println(minimumTotal(triangle)) // Выведет: 11
}

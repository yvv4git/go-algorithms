//go:build ignore

package main

import (
	"fmt"
)

func continuousSubarrays(nums []int) int64 {
	/*
		МЕТОД: Sliding Window
		- Используется подход с двумя указателями: `left` и `right`.
		- Указатель `right` расширяет окно, добавляя новый элемент в текущий подмассив.
		- Указатель `left` сжимает окно, если разница между максимальным и минимальным элементами в текущем окне превышает 2.
		- Для каждого положения указателя `right` вычисляется количество валидных подмассивов, заканчивающихся на `right`.
		- Количество валидных подмассивов, заканчивающихся на `right`, равно размеру текущего окна (`right - left + 1`).
		- Для эффективного вычисления максимального и минимального значений в окне используются переменные `maxVal` и `minVal`.

		ВРЕМЕННАЯ СЛОЖНОСТЬ: O(n)
		- Указатель `right` проходит через массив один раз, что занимает O(n).
		- Указатель `left` сдвигается только тогда, когда условие нарушается, и каждый элемент обрабатывается не более двух раз (один раз при добавлении в окно и один раз при удалении).
		- Внутренний цикл для обновления `maxVal` и `minVal` выполняется в среднем за O(1) для каждого элемента.
		- Таким образом, общая сложность составляет O(n).

		ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ: O(1)
		- Используется фиксированное количество дополнительной памяти: переменные `count`, `left`, `maxVal`, `minVal`.
		- Никакие дополнительные структуры данных (например, массивы или хэш-таблицы) не используются.
	*/
	n := len(nums)
	if n == 0 {
		return 0
	}

	var count int64 = 0
	left := 0
	maxVal := nums[0]
	minVal := nums[0]

	for right := 0; right < n; right++ {
		if nums[right] > maxVal {
			maxVal = nums[right]
		}
		if nums[right] < minVal {
			minVal = nums[right]
		}

		// Проверяем, превышает ли разница между maxVal и minVal 2
		for maxVal-minVal > 2 {
			// Двигаем левый указатель
			left++
			// Обновляем maxVal и minVal для нового подмассива
			maxVal = nums[left]
			minVal = nums[left]
			for i := left + 1; i <= right; i++ {
				if nums[i] > maxVal {
					maxVal = nums[i]
				}
				if nums[i] < minVal {
					minVal = nums[i]
				}
			}
		}

		// Количество новых подмассивов, которые заканчиваются на right
		count += int64(right - left + 1)
	}

	return count
}

func main() {
	// Пример входных данных
	nums := []int{1, 2, 3, 4, 5}

	// Вызов функции и вывод результата
	result := continuousSubarrays(nums)
	fmt.Println(result) // Ожидаемый вывод: 15
}

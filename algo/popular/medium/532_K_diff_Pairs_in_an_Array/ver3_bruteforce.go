//go:build ignore

package main

// findPairsBruteforce находит количество уникальных k-diff пар в массиве
// Использует алгоритм полного перебора (bruteforce)
func findPairsBruteforce(nums []int, k int) int {
	/*
		МЕТОД: Полный перебор (Bruteforce)
		ОПИСАНИЕ:
		- Используем два вложенных цикла для проверки всех возможных пар чисел
		- Для каждой пары (i, j) проверяем условие |nums[i] - nums[j]| == k
		- Убеждаемся, что i != j (элементы на разных позициях)
		- Используем дополнительный map для отслеживания уже подсчитанных пар
		- Пара считается уникальной по набору чисел, независимо от порядка
		- Для избежания дублирования сортируем числа в паре перед добавлением в map

		TIME COMPLEXITY: O(n²), где n - количество элементов в массиве
		Два вложенных цикла дают квадратичную сложность

		SPACE COMPLEXITY: O(n), где n - количество уникальных пар в массиве
		В худшем случае map может содержать до n²/2 пар, но обычно значительно меньше
	*/
	if k < 0 {
		return 0
	}

	seen := make(map[[2]int]bool) // для отслеживания уникальных пар
	count := 0

	for i := 0; i < len(nums); i++ {
		for j := i + 1; j < len(nums); j++ {
			if abs(nums[i]-nums[j]) == k {
				// Создаем пару и сортируем для уникальности
				pair := [2]int{nums[i], nums[j]}
				if pair[0] > pair[1] {
					pair[0], pair[1] = pair[1], pair[0]
				}

				// Если пару еще не считали, увеличиваем счетчик
				if !seen[pair] {
					seen[pair] = true
					count++
				}
			}
		}
	}

	return count
}

// abs возвращает абсолютное значение числа
func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

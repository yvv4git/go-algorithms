//go:build ignore

package main

// findPairsHashMap находит количество уникальных k-diff пар в массиве
// Использует алгоритм с хэш-таблицей
func findPairsHashMap(nums []int, k int) int {
	/*
		МЕТОД: Хэш-таблица (Map)
		ОПИСАНИЕ:
		- Используем map для хранения встреченных чисел и их использования в парах
		- Проходим по массиву и для каждого числа проверяем наличие nums[i] + k и nums[i] - k
		- Для избежания дублирования пар используем дополнительный map для отслеживания уже использованных чисел
		- Когда находим пару, отмечаем числа как использованные для избежания повторного подсчета
		- Особый случай k = 0: считаем только числа, встречающиеся более одного раза

		TIME COMPLEXITY: O(n), где n - количество элементов в массиве
		Проходим по массиву один раз, операции с map выполняются за O(1) в среднем

		SPACE COMPLEXITY: O(n), где n - количество уникальных элементов в массиве
		В худшем случае map может содержать все элементы массива
	*/
	if k < 0 {
		return 0
	}

	seen := make(map[int]bool)   // для отслеживания уже использованных чисел в парах
	numsMap := make(map[int]int) // для подсчета частоты каждого числа

	// Подсчитываем частоту каждого числа
	for _, num := range nums {
		numsMap[num]++
	}

	count := 0

	// Проходим по каждому уникальному числу
	for num := range numsMap {
		target := num + k

		if k == 0 {
			// Для k = 0 считаем только числа, встречающиеся более одного раза
			if numsMap[num] > 1 && !seen[num] {
				count++
				seen[num] = true
			}
		} else {
			// Для k > 0 проверяем наличие target = num + k
			if numsMap[target] > 0 && !seen[num] && !seen[target] {
				count++
				seen[num] = true
				seen[target] = true
			}
		}
	}

	return count
}

package main

// Функция bulbSwitch принимает целое число n, представляющее количество лампочек.
func bulbSwitch(n int) int {
	/*
		METHOD: Sieve of Eratosthenes / Сито Эратосфена
		Сито Эратосфена - это алгоритм для нахождения всех простых чисел с заданным пределом.
		Он работает путем итеративной пометки кратных каждого простого числа как составных (не простых) до тех пор,
		пока не будут обработаны все числа с заданным пределом.

		TIME COMPLEXITY: O(sqrt(n)), где n - входное значение.
		Это связано с тем, что функция выполняет итерации от 1 до квадратного корня из n, используя переменную i.
		Количество итераций равно квадратному корню из n, что является постоянным коэффициентом.
		Следовательно, временная сложность равна O(√n).

		SPACE COMPLEXITY: O(1), т.к. мы не создаем никаких дополнительных структур данных,
		которые увеличиваются с увеличением размера входных данных. Следовательно, объемная сложность равна O(1).
	*/
	// Если n равно 0, значит лампочек нет, поэтому мы возвращаем 0.
	if n == 0 {
		return 0
	}

	// Инициализируем переменную count, которая будет хранить количество лампочек, которые включены после последней операции.
	count := 0
	// Итерируем от 1 до квадратного корня из n.
	for i := 1; i*i <= n; i++ {
		// Увеличиваем значение count на 1.
		count++
	}

	// Возвращаем значение count, которое представляет количество лампочек, которые будут включены после последней операции.
	return count
}

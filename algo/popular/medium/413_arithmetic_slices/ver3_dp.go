package main

func numberOfArithmeticSlicesV3(nums []int) int {
	/*
		METHOD:
		Используется динамическое программирование (Dynamic Programming, DP) для подсчета арифметических срезов.
		Создается массив dp, где dp[i] представляет собой длину текущего арифметического среза, заканчивающегося на элемент nums[i].
		Если текущая разность (delta) совпадает с предыдущей, то длина среза увеличивается. В противном случае, начинается новый срез.

		TIME COMPLEXITY:
		O(n), где n - длина массива nums. Алгоритм выполняет один проход по массиву для заполнения массива dp, а затем один проход для суммирования результатов.

		SPACE COMPLEXITY:
		O(n), где n - длина массива nums. Используется дополнительный массив dp размером n для хранения длин арифметических срезов.
	*/
	if len(nums) < 3 {
		return 0
	}

	// Создание массива dp для хранения длин арифметических срезов
	dp := make([]int, len(nums))
	dp[0] = 1
	dp[1] = 2

	// Инициализация начальной разности
	delta := nums[1] - nums[0]

	// Заполнение массива dp
	for i := 2; i < len(nums); i++ {
		if nums[i]-nums[i-1] == delta {
			// Если текущая разность совпадает с предыдущей, увеличиваем длину среза
			dp[i] = dp[i-1] + 1
		} else {
			// В противном случае начинаем новый срез
			dp[i] = 2
			delta = nums[i] - nums[i-1]
		}
	}

	// Суммирование результатов
	var sum int
	for _, v := range dp {
		if v > 2 {
			sum += v - 2
		}
	}

	return sum
}

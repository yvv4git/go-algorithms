package main

import (
	"fmt"
)

// Функция для проверки, является ли подмассив арифметическим срезом
func isArithmeticSlice(sub []int) bool {
	/*
		METHOD: Brute force
		Проверяет, является ли подмассив арифметическим срезом, сравнивая разность между соседними элементами.

		TIME COMPLEXITY:
		O(m), где m - длина подмассива. Функция выполняет один проход по подмассиву.

		SPACE COMPLEXITY:
		O(1), используется постоянное количество дополнительной памяти (переменные diff и i).
	*/
	if len(sub) < 3 {
		return false
	}
	diff := sub[1] - sub[0]
	for i := 2; i < len(sub); i++ {
		if sub[i]-sub[i-1] != diff {
			return false
		}
	}
	return true
}

// Функция для подсчета арифметических срезов длиной не менее 3
func countArithmeticSlices(nums []int) int {
	/*
		METHOD:
		Использует два вложенных цикла для перебора всех возможных подмассивов длиной не менее 3 и проверяет каждый из них на арифметический срез.

		TIME COMPLEXITY:
		O(n^3), где n - длина массива. Внешний цикл выполняется n-2 раза, средний цикл выполняется n-2 раза для каждой итерации внешнего цикла, и функция isArithmeticSlice выполняется за O(m), где m - длина подмассива.

		SPACE COMPLEXITY:
		O(1), используется постоянное количество дополнительной памяти (переменные count, n, i, j).
	*/
	count := 0
	n := len(nums)

	// Перебираем все возможные подмассивы длиной не менее 3
	for i := 0; i < n-2; i++ {
		for j := i + 2; j < n; j++ {
			if isArithmeticSlice(nums[i : j+1]) {
				count++
			}
		}
	}

	return count
}

func main() {
	// Пример последовательности чисел
	arr := []int{1, 2, 3, 4, 5}

	// Подсчет арифметических срезов
	result := countArithmeticSlices(arr)

	// Вывод результата
	fmt.Printf("Количество арифметических срезов длиной не менее 3: %d\n", result)
}

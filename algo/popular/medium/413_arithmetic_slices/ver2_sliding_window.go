package main

// Функция для подсчета арифметических срезов с использованием скользящего окна
func numberOfArithmeticSlicesV2(nums []int) int {
	/*
		METHOD: Sliding window
		Используется метод скользящего окна (sliding window) для эффективного подсчета арифметических срезов.
		Алгоритм проходит по массиву один раз, динамически обновляя начало окна и разность, чтобы найти все возможные арифметические срезы.

		TIME COMPLEXITY:
		O(n), где n - длина массива. Алгоритм выполняет один проход по массиву, что делает его линейным по времени.

		SPACE COMPLEXITY:
		O(1), используется постоянное количество дополнительной памяти (переменные windowStart, diff, count, currentDiff).
	*/
	// Если длина массива меньше 3, то арифметических срезов нет
	if len(nums) < 3 {
		return 0
	}

	// Инициализация переменных
	// windowStart - начало текущего окна
	// diff - текущая разность арифметического среза
	// count - общее количество арифметических срезов
	windowStart, diff, count := 0, nums[0]-nums[1], 0

	// Проход по массиву с помощью скользящего окна
	for windowEnd := 2; windowEnd < len(nums); windowEnd++ {
		// Вычисление текущей разности
		currentDiff := nums[windowEnd-1] - nums[windowEnd]

		// Если текущая разность не равна предыдущей, значит окно закончилось
		if currentDiff != diff {
			// Подсчет арифметических срезов в текущем окне
			count += countSlices(windowEnd - windowStart)
			// Обновление начала нового окна
			windowStart = windowEnd - 1
			// Обновление текущей разности
			diff = currentDiff
		}
	}

	// Подсчет арифметических срезов в последнем окне
	count += countSlices(len(nums) - windowStart)
	return count
}

// Вспомогательная функция для подсчета количества арифметических срезов в окне
func countSlices(length int) int {
	// Если длина окна меньше 3, то арифметических срезов нет
	if length < 3 {
		return 0
	}
	// Формула для подсчета количества арифметических срезов в окне длиной length
	return (length - 1) * (length - 2) / 2
}

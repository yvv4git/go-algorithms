package main

import "sort"

// Функция для слияния пересекающихся интервалов
func mergeV2(intervals [][]int) [][]int {
	/*
		METHOD: Sorting & Merging
		TIME COMPLEXITY: O(n log n), где n - количество интервалов, потому что мы сначала сортируем массив, затем проходимся по нему один раз.
		SPACE COMPLEXITY: O(n) в худшем случае, так как в худшем случае мы можем получить новый массив,
		который будет содержать все интервалы, если они не пересекаются.
		В этом случае, если мы не можем объединить ни один интервал, результирующий массив будет содержать все элементы из исходного массива.
	*/
	// Если интервалы отсутствуют, то возвращаем пустой массив
	if len(intervals) == 0 {
		return [][]int{}
	}

	// Сортируем интервалы по начальной точке
	sort.Slice(intervals, func(i, j int) bool {
		return intervals[i][0] < intervals[j][0]
	})

	// Инициализируем переменные для хранения результата и текущего интервала
	var ans [][]int
	current := intervals[0]

	// Проходимся по оставшимся интервалам
	for _, interval := range intervals[1:] {
		// Если начало текущего интервала больше конца предыдущего,
		// то добавляем предыдущий интервал в результат и обновляем текущий
		if interval[0] > current[1] {
			ans = append(ans, current)
			current = interval
		} else {
			// Если интервалы пересекаются, то обновляем конец текущего интервала
			current[1] = max(current[1], interval[1])
		}
	}

	// Добавляем последний интервал в результат
	return append(ans, current)
}

//// Функция для нахождения максимума из двух чисел
//func max(a, b int) int {
//	if a > b {
//		return a
//	}
//	return b
//}

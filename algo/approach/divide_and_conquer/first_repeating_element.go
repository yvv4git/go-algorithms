//go:build ignore

package main

import "fmt"

// Описание: Напишите программу, которая находит первый повторяющийся элемент в массиве целых чисел.
// Если таких элементов нет, программа должна вернуть -1.

// Функция для поиска первого повторяющегося элемента в массиве.
func findFirstRepeatingElement(arr []int) int {
	/*
		METHOD: Divide and Conquer
		Мы используем карту (map), чтобы отслеживать, встречался ли уже элемент в массиве.
		Если элемент встречается второй раз, возвращаем его как первый повторяющийся.
		Если весь массив пройден, и повторяющегося элемента не найдено, возвращаем -1.

		TIME COMPLEXITY: O(n)
		Проход по массиву выполняется один раз, и для каждого элемента происходит проверка и обновление карты за O(1).
		Таким образом, время работы алгоритма составляет O(n), где n — это количество элементов в массиве.

		SPACE COMPLEXITY: O(n)
		Мы используем карту для хранения встреченных элементов.
		В худшем случае, если все элементы массива уникальны, потребуется пространство для хранения всех элементов.
		Таким образом, пространственная сложность составляет O(n), где n — количество элементов в массиве.
	*/
	// Создаем пустую map для отслеживания встреченных элементов
	seen := make(map[int]bool)

	// Проходим по всем элементам массива
	for _, num := range arr {
		// Если элемент уже встречался, возвращаем его
		if seen[num] {
			return num
		}
		// Если элемент не встречался, добавляем его в map
		seen[num] = true
	}

	// Если повторяющийся элемент не найден, возвращаем -1
	return -1
}

func main() {
	// Пример массива
	arr := []int{4, 5, 6, 7, 8, 5, 9, 10}

	// Ищем первый повторяющийся элемент
	result := findFirstRepeatingElement(arr)

	// Выводим результат
	if result != -1 {
		fmt.Printf("Первый повторяющийся элемент: %d\n", result)
	} else {
		fmt.Println("Повторяющийся элемент не найден")
	}
}

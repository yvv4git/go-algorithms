//go:build ignore

package main

import "fmt"

// Функция для слияния двух отсортированных массивов
func merge(left, right []int) []int {
	/*
		Задача: Реализовать слияние двух отсортированных массивов в один отсортированный.

		Подход:
		1. Для слияния двух массивов используем два указателя: один для левого массива, другой для правого.
		2. Сравниваем текущие элементы обоих массивов и добавляем меньший в новый массив.
		3. Когда один из массивов будет исчерпан, добавляем оставшиеся элементы другого массива.

		ТАЙМ-КОМПЛЕКСНОСТЬ: O(n), где n — длина объединяемых массивов.
		СПЕЙС-КОМПЛЕКСНОСТЬ: O(n)
	*/
	var result []int
	i, j := 0, 0

	// Сливаем массивы, пока есть элементы в обоих
	for i < len(left) && j < len(right) {
		if left[i] < right[j] {
			result = append(result, left[i])
			i++
		} else {
			result = append(result, right[j])
			j++
		}
	}

	// Добавляем оставшиеся элементы из left
	for i < len(left) {
		result = append(result, left[i])
		i++
	}

	// Добавляем оставшиеся элементы из right
	for j < len(right) {
		result = append(result, right[j])
		j++
	}

	return result
}

// Функция для сортировки массива с помощью алгоритма Merge Sort
func mergeSort(arr []int) []int {
	/*
		Задача: Реализовать сортировку массива с использованием алгоритма Merge Sort.

		Подход:
		1. Если длина массива меньше или равна 1, возвращаем его, так как он уже отсортирован.
		2. Разделяем массив на две части.
		3. Рекурсивно сортируем обе части.
		4. Сливаем отсортированные части с помощью функции merge.

		ТАЙМ-КОМПЛЕКСНОСТЬ: O(n log n), где n — длина массива.
		СПЕЙС-КОМПЛЕКСНОСТЬ: O(n)
	*/
	// Базовый случай: если массив состоит из одного элемента или пустой
	if len(arr) <= 1 {
		return arr
	}

	// Разделяем массив на две части
	mid := len(arr) / 2
	left := mergeSort(arr[:mid])
	right := mergeSort(arr[mid:])

	// Сливаем отсортированные части
	return merge(left, right)
}

func main() {
	// Пример: сортировка массива
	arr := []int{38, 27, 43, 3, 9, 82, 10}

	// Вызываем функцию сортировки слиянием
	sortedArr := mergeSort(arr)

	// Выводим результат
	fmt.Println("Отсортированный массив:", sortedArr)
}

//go:build ignore

package main

import (
	"fmt"
	"sort"
)

// Функция для поиска чисел, чья сумма равна целевому числу
func findThreeSum(arr []int, target int) [][3]int {
	/*
		METHOD: Two Pointers Approach
		1. Сортируем массив, чтобы использовать два указателя для поиска нужных чисел.
		2. Проходим по массиву, для каждого элемента пытаемся найти пару чисел с помощью двух указателей.
		3. Если сумма текущего элемента и пары на указателях равна целевому числу, сохраняем эту пару.
		4. Сдвигаем указатели и продолжаем поиск, избегая дубликатов.

		TIME COMPLEXITY: O(n^2) — для каждого элемента массива выполняем поиск с двумя указателями.
		SPACE COMPLEXITY: O(1) — дополнительные массивы не создаются.
	*/

	var result [][3]int

	// Сортируем массив
	sort.Ints(arr)

	// Проходим по массиву
	for i := 0; i < len(arr)-2; i++ {
		// Пропускаем дубликаты
		if i > 0 && arr[i] == arr[i-1] {
			continue
		}

		// Используем два указателя для поиска пары
		left, right := i+1, len(arr)-1

		// Ищем пару, которая вместе с arr[i] дает целевую сумму
		for left < right {
			sum := arr[i] + arr[left] + arr[right]
			if sum == target {
				// Если нашли нужную сумму, добавляем пару в результат
				result = append(result, [3]int{arr[i], arr[left], arr[right]})
				// Пропускаем дубликаты
				for left < right && arr[left] == arr[left+1] {
					left++
				}
				for left < right && arr[right] == arr[right-1] {
					right--
				}
				// Сдвигаем указатели
				left++
				right--
			} else if sum < target {
				// Если сумма меньше целевого числа, сдвигаем левый указатель вправо
				left++
			} else {
				// Если сумма больше целевого числа, сдвигаем правый указатель влево
				right--
			}
		}
	}

	return result
}

/*
	Задача: Найти все уникальные тройки чисел в массиве, которые в сумме дают заданное число.

	Условия задачи:
	Дан отсортированный массив целых чисел и целевое число. Требуется найти все уникальные тройки чисел из массива, которые в сумме равны целевому числу.

	Пример:
	Вход:
		arr = [-1, 0, 1, 2, -1, -4], target = 0

	Выход:
		[[-1, -1, 2], [-1, 0, 1]]

	Алгоритм использует метод двух указателей для поиска уникальных троек чисел, сумма которых равна заданному числу.

	ТАЙМ-КОМПЛЕКСНОСТЬ: O(n^2) — для каждого элемента массива выполняем поиск с двумя указателями.
	СПЕЙС-КОМПЛЕКСНОСТЬ: O(1) — дополнительные массивы не создаются
*/

func main() {
	// Задаем отсортированный массив
	arr := []int{-1, 0, 1, 2, -1, -4}

	// Задаем целевое число
	target := 0

	// Вызываем функцию для поиска троек
	result := findThreeSum(arr, target)

	// Выводим результат
	fmt.Println("Найденные тройки чисел:")
	for _, triplet := range result {
		fmt.Printf("%v\n", triplet)
	}
}

//go:build ignore

package main

import (
	"fmt"
)

// Функция для нахождения максимальной площади прямоугольника, заключенного между вертикальными линиями
func maxArea(height []int) int {
	/*
		METHOD: Two Pointers Approach
		1. Используем два указателя, один на левом конце массива, другой на правом.
		2. Вычисляем площадь прямоугольника, ограниченного текущими линиями, и обновляем максимальную площадь.
		3. Сдвигаем указатель, у которого высота меньше, в сторону центра, чтобы попытаться увеличить площадь.

		TIME COMPLEXITY: O(n) — проходим по массиву один раз.
		SPACE COMPLEXITY: O(1) — дополнительные массивы не создаются.
	*/

	maxArea := 0
	left, right := 0, len(height)-1

	// Пока указатели не встретятся
	for left < right {
		// Вычисляем площадь текущего прямоугольника
		width := right - left
		area := width * min(height[left], height[right])

		// Обновляем максимальную площадь
		if area > maxArea {
			maxArea = area
		}

		// Сдвигаем указатель, у которого высота меньше
		if height[left] < height[right] {
			left++
		} else {
			right--
		}
	}

	return maxArea
}

// Минимум двух чисел
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

/*
	Задача: Найти максимальную площадь, заключенную между двумя вертикальными линиями.

	Условия задачи:
	Дан массив целых чисел, где каждое число представляет собой высоту вертикальной линии, расположенной на соответствующем индексе. Нужно найти максимальную площадь прямоугольника, заключенного между двумя линиями.

	Пример:
	Вход:
		height = [1,8,6,2,5,4,8,3,7]

	Выход:
		49

	Алгоритм использует метод двух указателей для поиска максимальной площади, сдвигая указатели и проверяя возможные варианты.

	ТАЙМ-КОМПЛЕКСНОСТЬ: O(n) — проходим по массиву один раз.
	СПЕЙС-КОМПЛЕКСНОСТЬ: O(1) — дополнительные массивы не создаются.
*/

func main() {
	// Задаем массив высот
	height := []int{1, 8, 6, 2, 5, 4, 8, 3, 7}

	// Вызываем функцию для нахождения максимальной площади
	result := maxArea(height)

	// Выводим результат
	fmt.Printf("Максимальная площадь: %d\n", result)
}

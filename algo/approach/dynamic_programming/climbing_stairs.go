//go:build ignore

package main

import "fmt"

// Функция для нахождения количества способов подняться на n ступенек
func climbStairs(n int) int {
	/*
		Задача: Сколько способов существует, чтобы подняться на n ступенек, если за один шаг можно подняться на 1 или 2 ступеньки.

		Подход:
		1. Используем динамическое программирование с массивом dp[], где dp[i] — количество способов добраться до i-й ступеньки.
		2. Рекуррентное соотношение: dp[i] = dp[i-1] + dp[i-2], так как можно перейти либо с предыдущей ступеньки, либо с той, что на две ступеньки ниже.
		3. Начальные условия: dp[0] = 1 (один способ не делать шагов), dp[1] = 1 (один способ подняться на первую ступеньку).

		ТАЙМ-КОМПЛЕКСНОСТЬ: O(n)
		СПЕЙС-КОМПЛЕКСНОСТЬ: O(n)
	*/

	// Массив для хранения количества способов
	dp := make([]int, n+1)
	dp[0] = 1
	dp[1] = 1

	// Заполняем массив dp с помощью рекуррентного соотношения
	for i := 2; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}

	// Ответ — количество способов подняться на n ступенек
	return dp[n]
}

func main() {
	// Пример: сколько способов подняться на 5 ступенек
	n := 5
	result := climbStairs(n)

	// Выводим результат
	fmt.Printf("Количество способов подняться на %d ступенек: %d\n", n, result)
}

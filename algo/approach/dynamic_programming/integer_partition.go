//go:build ignore

package main

import (
	"fmt"
)

// Функция для нахождения количества разбиений числа на сумму положительных целых чисел
func integerPartition(n int) int {
	/*
		Задача: Необходимо найти количество разбиений числа n на сумму целых чисел.
		Разбиения, которые отличаются только порядком слагаемых, считаются одинаковыми.

		Описание подхода:
		1. Используем динамическое программирование с массивом dp[], где dp[i] — количество способов разбиения числа i.
		2. Для каждого числа от 1 до n, для каждого возможного слагаемого j от 1 до i, добавляем dp[i-j] к dp[i].
		3. Результат: dp[n], количество разбиений числа n.

		Пример:
		Для числа n = 5 существует 7 разбиений:
		5
		4 + 1
		3 + 2
		3 + 1 + 1
		2 + 2 + 1
		2 + 1 + 1 + 1
		1 + 1 + 1 + 1 + 1

		Таким образом, ответ для числа 5 — 7.

		ТАЙМ-КОМПЛЕКСНОСТЬ: O(n^2) (двойной цикл по массиву dp)
		СПЕЙС-КОМПЛЕКСНОСТЬ: O(n) (массив dp)
	*/
	dp := make([]int, n+1)
	dp[0] = 1 // Один способ разбиения числа 0

	// Заполняем массив dp
	for i := 1; i <= n; i++ {
		for j := i; j <= n; j++ {
			dp[j] += dp[j-i]
		}
	}

	// Ответом является dp[n], количество разбиений числа n
	return dp[n]
}

func main() {
	// Задача: находим количество разбиений числа 5 на сумму целых чисел.
	// Входное число
	n := 5

	// Вызываем функцию для нахождения количества разбиений
	result := integerPartition(n)

	// Выводим результат
	fmt.Printf("Количество разбиений числа %d: %d\n", n, result)
}

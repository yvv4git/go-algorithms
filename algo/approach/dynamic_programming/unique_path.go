package main

import "fmt"

// У нас есть прямоугольная решетка размером m x n.
// Нужно найти количество уникальных путей от верхнего левого угла до нижнего правого угла решетки,
// двигаясь только вправо или вниз.

// Функция для подсчета количества путей в решетке
func uniquePaths(m int, n int) int {
	/*
		METHOD: Dynamic Programming

		TIME COMPLEXITY: O(m*n), т.к. мы проходим по всем клеткам таблицы размером m x n.
		Каждое вычисление занимает O(1), поэтому общая временная сложность алгоритма составляет O(m * n), где m и n — это размеры решетк

		SPACE COMPLEXITY: O(m*n), т.к. мы создаем таблицу размером m x n, то есть используем O(m * n) памяти для хранения таблицы. Т
		аким образом, пространственная сложность алгоритма составляет O(m * n).
	*/
	// Создаем таблицу dp размером m x n
	// dp[i][j] будет хранить количество путей для клетки (i, j)
	dp := make([][]int, m)
	for i := range dp {
		dp[i] = make([]int, n)
	}

	// Инициализируем первую строку и первый столбец
	// В первой строке все клетки имеют значение 1, так как мы можем двигаться только вправо
	// В первом столбце все клетки имеют значение 1, так как мы можем двигаться только вниз
	for i := 0; i < m; i++ {
		dp[i][0] = 1
	}
	for j := 0; j < n; j++ {
		dp[0][j] = 1
	}

	// Заполняем таблицу dp
	// Каждая клетка dp[i][j] равна сумме значений клетки сверху dp[i-1][j] и клетки слева dp[i][j-1]
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[i][j] = dp[i-1][j] + dp[i][j-1]
		}
	}

	// Ответ находится в правом нижнем углу таблицы dp
	return dp[m-1][n-1]
}

func main() {
	// Пример: решетка 3x7
	m := 3
	n := 7

	// Выводим количество уникальных путей
	fmt.Printf("Количество уникальных путей: %d\n", uniquePaths(m, n))
}

//go:build ignore

package main

import "fmt"

// Функция для нахождения минимальной стоимости пути в матрице
func minPathSum(grid [][]int) int {
	/*
		Задача: Найти минимальную стоимость пути от верхнего левого угла до правого нижнего угла в матрице, двигаясь только вправо или вниз.

		Подход:
		1. Используем двумерный массив dp[i][j], где dp[i][j] — минимальная стоимость пути до точки (i, j).
		2. Для каждой точки (i, j) используем минимальную стоимость пути либо сверху, либо слева.
		3. Ответом будет значение dp[m-1][n-1], где m и n — размеры матрицы.

		ТАЙМ-КОМПЛЕКСНОСТЬ: O(m * n), где m и n — размеры матрицы.
		СПЕЙС-КОМПЛЕКСНОСТЬ: O(m * n)
	*/

	m := len(grid)
	n := len(grid[0])

	// Создаем двумерный массив для хранения минимальных стоимостей
	dp := make([][]int, m)
	for i := range dp {
		dp[i] = make([]int, n)
	}

	// Инициализируем первую строку и первый столбец
	dp[0][0] = grid[0][0]
	for i := 1; i < m; i++ {
		dp[i][0] = dp[i-1][0] + grid[i][0]
	}
	for j := 1; j < n; j++ {
		dp[0][j] = dp[0][j-1] + grid[0][j]
	}

	// Заполняем остальную часть таблицы
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
		}
	}

	// Ответ — минимальная стоимость пути до правого нижнего угла
	return dp[m-1][n-1]
}

// Вспомогательная функция для нахождения минимума двух чисел
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	// Пример: минимальная стоимость пути в матрице
	grid := [][]int{
		{1, 3, 1},
		{1, 5, 1},
		{4, 2, 1},
	}

	result := minPathSum(grid)

	// Выводим результат
	fmt.Printf("Минимальная стоимость пути: %d\n", result)
}

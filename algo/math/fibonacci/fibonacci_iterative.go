package fibonacci

func fibonacciIterative(n uint) uint {
	/*
		METHOD: Iterative
		TIME COMPLEXITY: O(n), где n - это входной параметр функции. Это связано с тем, что функция выполняет одно итеративное вычисление для каждого числа от 2 до n.
		SPACE COMPLEXITY: O(1), так как используется фиксированное количество переменных, независимо от размера входного параметра n.
		Это означает, что алгоритм требует постоянного объема памяти, независимо от размера входных данных.
	*/
	// Если n меньше 2, то результат равен n.
	if n < 2 {
		return n
	}

	// Инициализация переменных a и b для вычисления чисел Фибоначчи.
	// a и b будут использоваться для накопления значений чисел Фибоначчи.
	var a, b uint

	// Начальное значение b устанавливается равным 1, так как первое число Фибоначчи равно 0, а второе равно 1.
	b = 1

	// Цикл for вычисляет числа Фибоначчи от 2 до n.
	for n--; n > 0; n-- {
		// Вычисление текущего числа Фибоначчи как суммы двух предыдущих.
		a += b
		// Сдвиг значений a и b на один шаг вперед.
		a, b = b, a
	}

	return b
}

// Последовательность, в которой каждое число равно сумме двух предыдущих.
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377 и т.д.
func fibonacciIterativeV2(n int) int {
	// Если n меньше или равно 1, просто возвращаем n (базовый случай)
	if n <= 1 {
		return n
	}

	// Инициализируем первые два числа Фибоначчи
	prev, curr := 0, 1

	// Проходим циклом от 2 до n, вычисляя следующее число в последовательности
	for i := 2; i <= n; i++ {
		next := prev + curr     // Вычисляем следующее число Фибоначчи
		prev, curr = curr, next // Обновляем значения: предыдущее становится текущим, текущее — следующим
	}

	return curr
}

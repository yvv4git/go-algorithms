package array

// arrayGet - доступ к элементу массива осуществляется за константное время: O(1).
// Т.к. мы знаем адрес начала массива в памяти и размер элемента, мы можем вычислить позицию в памяти
// нужного нам элемента.
func arrayGet(arr []int, idx int) int {
	return arr[idx]
}

// arraySearch - поиск элемета в массиве осуществляется за линейное время: O(n).
// Это связано с тем, что придется перечислить все элементы массива(худший случай).
func arraySearch(arr []int, want int) bool {
	for _, val := range arr {
		if val == want {
			return true
		}
	}

	return false
}

// arrayDelete - удаление элемента из массива осуществляется за линейное время: O(n).
// После удаления одного элемента придется сдвинуть все остальные на одну позицию(худший случай).
func arrayDelete(arr []int, idx int) []int {
	return append(arr[:idx], arr[idx+1:]...)
}

// arrayInsert - вставка нового элемента в массив осуществляется за линейное время: O(n).
// Конечно, может повезти и вставлять элемент придется в конец.
// Кроме того, имеют место накладные расходы по памяти, т.к. если в массиве нет свободной
// памяти, то для добавляения элемента придется выделить новый блок памяти и добавлять
// и добавлять элемент туда.
func arrayInsert(arr []int, idx int, newElement int) []int {
	return append(
		arr[:idx],
		append([]int{newElement}, arr[idx:]...)...,
	)
}

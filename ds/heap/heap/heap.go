/*
Package heap

Heap / Двоичная куча.

Свойства:
- Левый потомок вершины с индексом i имеет индекс 2*i+1.
- Правый потомок вершины с индексом i имеет индекс 2*i+2.
- Корень дерева - это элемент с индексом 0.
- Высота(height) двоичной кучи равна высоте дерева, т.е. log_2(n), где n - количество элементов массива.

TIME COMPLEXITY:
- Сортировка с применением двоичной кучи занимает O(n*log_2(n)). Это связано с тем, что сначала надо построить кучу -
O(n), затем извлечение n элементов - O(n log_2(n))
- Нахождение минимума O(1).
- Удаление минимума O(h), где h - это высота дерева.
- Добавление нового элемента в кучу O(h), где h - это высота дерева.

Операции:
- Нахождение минимума
- Удалением минимума
- Добавление нового элемента в кучу

Где используется:
- В алгоритмах поиска кратчайшего пути.
- Сортировка элементов, путем превращения массива в кучу, а кучу в отсортированный массив.
*/
package heap

type IntHeap []int

func (h IntHeap) Len() int {
	return len(h)
}

func (h IntHeap) Less(i, j int) bool {
	return h[i] < h[j]
}

func (h IntHeap) Swap(i, j int) {
	h[i], h[j] = h[j], h[i]
}

func (h *IntHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}

func (h *IntHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}
